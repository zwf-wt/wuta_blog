import{_ as s,o as i,c as a,R as l}from"./chunks/framework.MMMQMGZx.js";const c=JSON.parse('{"title":"sql 优化","description":"","frontmatter":{},"headers":[],"relativePath":"views/sql/sql-optimize.md","filePath":"views/sql/sql-optimize.md"}'),n={name:"views/sql/sql-optimize.md"},h=l(`<h1 id="sql-优化" tabindex="-1">sql 优化 <a class="header-anchor" href="#sql-优化" aria-label="Permalink to &quot;sql 优化&quot;">​</a></h1><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>MYSql 逻辑分层：连接层、服务层、引擎层、存储层</p><p>InnoDB(默认)：事务优化(适合高并发操作；行锁) MyISAM：表锁(适合读多写少)</p><h3 id="查询数据库引擎" tabindex="-1">查询数据库引擎 <a class="header-anchor" href="#查询数据库引擎" aria-label="Permalink to &quot;查询数据库引擎&quot;">​</a></h3><ol><li>支持哪些引擎</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show engines;</span></span></code></pre></div><ol start="2"><li>当前数据库使用的引擎</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%storage_engine%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="3"><li>指定数据库对象的引擎：</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dept </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MYISAM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AUTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre></div><h2 id="sql优化" tabindex="-1">SQL优化 <a class="header-anchor" href="#sql优化" aria-label="Permalink to &quot;SQL优化&quot;">​</a></h2><blockquote><p>原因：性能低、执行时间长、等待时间长、sql语句欠佳(连接查询)、索引失效、服务器参数设置不合理(缓冲、线程数)</p></blockquote><h3 id="sql-编写过程" tabindex="-1">sql 编写过程 <a class="header-anchor" href="#sql-编写过程" aria-label="Permalink to &quot;sql 编写过程&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 编写过程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dinstinct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">having</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 解析过程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  from</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">having</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span></code></pre></div><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><blockquote><p>sql优化，主要就是在优化索引，索引相当于书的目录，index 是帮助mysql 高效获取数据的数据结构，索引是数据结构(树：B树、Hash树... 默认B+树)。Btree一般都是指B+, 数据全部存放在叶节点中，B+树中查询任意的数据次数都是n次(B+树的高度)</p></blockquote><blockquote><p>索引的弊端：</p></blockquote><ol><li>索引本身很大，可以存放在内存/硬盘(通常为硬盘)</li><li>索引不是所有情况均适用: a. 少量数据 b. 频繁更新的字段 c. 很少使用的字段</li><li>索引会降低增删改的效率(增删改 查)</li></ol><blockquote><p>优势</p></blockquote><ol><li>提高查询速度(降低io使用率)</li><li>降低cpu使用率(减少查询次数)</li></ol><h4 id="索引分类" tabindex="-1">索引分类 <a class="header-anchor" href="#索引分类" aria-label="Permalink to &quot;索引分类&quot;">​</a></h4><ul><li>单值索引单列：age;一个表可以多个单值索引,name</li><li>主键索引:不能重复。id 不能是nu11</li><li>唯一索引: 不能重复。id 可以是nu11</li><li>复合索引：多个列构成的索引, 相当于 二级目录。(name,age)</li></ul><h4 id="创建索引" tabindex="-1">创建索引 <a class="header-anchor" href="#创建索引" aria-label="Permalink to &quot;创建索引&quot;">​</a></h4><blockquote><p>注意:如果一个字段是primary key，则改字段默认就是 主键索引</p></blockquote><h5 id="方式一" tabindex="-1">方式一 <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- create 索引类型 索引名 on 表(字段)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 单值:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dept_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb(dept);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 唯一:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unique index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 复合索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dept_name_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb(dept,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h5 id="方式二" tabindex="-1">方式二: <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二:&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- alter table 表名 索引类型 索引名(字段)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 单值:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dept_index(dept)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 唯一:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unique</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name_index(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 复合索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dept_name_index(dept, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="删除索引" tabindex="-1">删除索引 <a class="header-anchor" href="#删除索引" aria-label="Permalink to &quot;删除索引&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- drop index 索引名 on 表名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb;</span></span></code></pre></div><h4 id="查看索引" tabindex="-1">查看索引 <a class="header-anchor" href="#查看索引" aria-label="Permalink to &quot;查看索引&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名</span></span></code></pre></div><h3 id="sql性能问题" tabindex="-1">sql性能问题 <a class="header-anchor" href="#sql性能问题" aria-label="Permalink to &quot;sql性能问题&quot;">​</a></h3><p>分析sql的执行计划：explain, 可以模拟SQL优化器执行SQL语句，从而让开发人员知道自己编写的SQL状况 mysql查询优化会干扰我们的优化</p><h4 id="查询执行计划-explain-sql-语句" tabindex="-1">查询执行计划 explain + sql 语句 <a class="header-anchor" href="#查询执行计划-explain-sql-语句" aria-label="Permalink to &quot;查询执行计划 explain + sql 语句&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- id: select 查询的序列号，表示查询中执行select子句或操作表的顺序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- select_type: 表示select的类型, 查询类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- table: 输出结果集的表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- type: 表示MySQL在表中找到所需行的方式，或称为访问类型, 类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- possible_keys: 表示查询时，可能使用的索引。可能用到的索引，是一种预测，不准。如果 possible keyNULL，则说明没用索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- key: 实际使用的索引</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- key_len: 实际使用索引字段的长度</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ref: 表之间的引用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- rows: 通过索引查询到的数据量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Extra: 额外的信息</span></span></code></pre></div><h5 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h5><ol><li>id相同: id值相同，从上往下顺序执行(查询表的顺序)。 表的执行顺序: 因数量的个数改变而改变的原因:笛卡儿积。数据小的表 优先查询;</li><li>id值不同: id值越大越优先查询(本质:在嵌套子查询时，先查内层再查外)</li><li>id值有相同，又有不同: id值越大越优先; id值相同，从上往下顺序执行</li></ol><h5 id="select-type" tabindex="-1">select_type <a class="header-anchor" href="#select-type" aria-label="Permalink to &quot;select_type&quot;">​</a></h5><ol><li>PRIMARY: 包含子查询SQL中的 主查询(最外层)</li><li>SUBQUERY: 包含子查询SQL中的 子查询(非最外层)</li><li>simple: 简单查询(不包含子查询、union)</li><li>derived:衍生查询(使用到了临时表)</li><li>union: union查询中的第二个及后续的查询语句</li><li>union result: 告知开发人员，那些表之间存在union查询</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- a.在from子查询中只有一张表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select*from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) cr;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- b. 在from子查询中，如果有tablel union table2。则table1 就是derived, table2就是union</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select*from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> form course </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h5 id="type-索引类型" tabindex="-1">type 索引类型 <a class="header-anchor" href="#type-索引类型" aria-label="Permalink to &quot;type 索引类型&quot;">​</a></h5><p>性能从好到差: system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all, 要对type进行优化的前提: 有索引。其中:<code>system, const</code>只是理想情况;实际能达到<code>ref&gt;range</code>就不错了，<code>range</code>已经可以访问索引了，<code>index</code>和<code>all</code>就说明索引失效了。</p><ol><li>system(忽略): 只有一条数据的系统表;或衍生表只有一条数据的主查询</li><li>const: 仅仅能査到一条数据的SQL,用于Primary key 或unique索引 (类型 与索引类型有关)</li><li>ref: 非唯一性索引，对于每个索引键的查询，返回匹配的所有行(0，多)</li><li>eq_ref: 唯一性索引:对于每个索引键的査询，返回匹配唯一行数据(有且只有1个，不能多 、不能0)</li><li>range: 检索指定范围的行，where后面是一个范围查询(between, &gt;, &lt;, &gt;=, &lt;=, in等, 有时in会失效),</li><li>index: 查询全部索引中数据</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- tid 是索引，只需要扫描索引表，不需要所有表中的所有数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher;</span></span></code></pre></div><ol start="7"><li>all: 全表扫描，查询所有表中的所有数据</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- cid不是索引，需要全表所有，即需要所有表中的所有数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course</span></span></code></pre></div><blockquote><p>总结</p></blockquote><ol><li>system/const:结果只有一条数据</li><li>eq_ref:结果多条;但是每条数据是唯一的;</li><li>ref:结果多条;但是每条数据是是0或多条;</li></ol><h5 id="key-len-索引长度" tabindex="-1">key_len 索引长度 <a class="header-anchor" href="#key-len-索引长度" aria-label="Permalink to &quot;key_len 索引长度&quot;">​</a></h5><p>作用:用于判断复合索引是否被完全使用，如果索引字段可以为Null, 则会使用1个字节来记录。</p><ul><li>utf-8: 一个字符3个字节</li><li>gbk: 1个字符2个字节</li><li>latin: 1个字符1个字节</li></ul><h5 id="ref-指明当前表所参照的字段" tabindex="-1">ref: 指明当前表所参照的字段 <a class="header-anchor" href="#ref-指明当前表所参照的字段" aria-label="Permalink to &quot;ref: 指明当前表所参照的字段&quot;">​</a></h5><h5 id="rows-被索引优化查询的数据个数-实际通过索引而查询到的数据个数" tabindex="-1">rows: 被索引优化查询的数据个数(实际通过索引而查询到的数据个数) <a class="header-anchor" href="#rows-被索引优化查询的数据个数-实际通过索引而查询到的数据个数" aria-label="Permalink to &quot;rows: 被索引优化查询的数据个数(实际通过索引而查询到的数据个数)&quot;">​</a></h5><h5 id="extra-其他额外的执行说明信息" tabindex="-1">Extra: 其他额外的执行说明信息 <a class="header-anchor" href="#extra-其他额外的执行说明信息" aria-label="Permalink to &quot;Extra: 其他额外的执行说明信息&quot;">​</a></h5><h6 id="using-filesort" tabindex="-1">using filesort <a class="header-anchor" href="#using-filesort" aria-label="Permalink to &quot;using filesort&quot;">​</a></h6><blockquote><p>性能消耗大；需要&quot;额外&quot;的一次排序(查询) 对于单索引，如果排序和查找的是同一个字段，则不会出现using filesort;如果排序和查找不是同一个字段，则会出现using filesort。如果是复合索引，则只有查询条件中使用了复合索引的最左边部分时，才会出现using filesort。因此，复合索引要想避免出现using filesort的情况，则查询条件要按照复合索引建立时的顺序，从左到右使用复合索引中的所有字段。 避免 where 和 order by 按照复合索引的顺序使用，不要跨列或无序使用。</p></blockquote><h6 id="using-temporary" tabindex="-1">using temporary <a class="header-anchor" href="#using-temporary" aria-label="Permalink to &quot;using temporary&quot;">​</a></h6><blockquote><p>性能消耗大;使用了临时表保存中间结果。一般出现在groupy by语句中 避免：查询那些列，就根据那些列 group by分组</p></blockquote><h6 id="using-index" tabindex="-1">using index <a class="header-anchor" href="#using-index" aria-label="Permalink to &quot;using index&quot;">​</a></h6><blockquote><p>性能提升;索引覆盖(覆盖索引)，不需要回表查询数据，不读取原文件，只从索引文件中获取数据，</p></blockquote><p>只要使用到的列，全部都在索引中，就是索引覆盖using index</p><p>如果用到了索引覆盖(using index)时，会对 possible_keys 和 key 有影响：如果没有where,则索引只出现在key中，如果有where,则索引出现在key和possible_keys中。</p><h6 id="using-where" tabindex="-1">using where <a class="header-anchor" href="#using-where" aria-label="Permalink to &quot;using where&quot;">​</a></h6><blockquote><p>需要回表查询</p></blockquote><h6 id="using-index-condition" tabindex="-1">using index condition <a class="header-anchor" href="#using-index-condition" aria-label="Permalink to &quot;using index condition&quot;">​</a></h6><blockquote><p>查询的列不完全被索引覆盖，需要回表查询</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 假设 age 是索引列，但查询语句 \`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 此语句必须回原表查Name, 因此不是索引覆盖</span></span></code></pre></div><h6 id="impossible-where" tabindex="-1">impossible where <a class="header-anchor" href="#impossible-where" aria-label="Permalink to &quot;impossible where&quot;">​</a></h6><blockquote><p>where子句的值总是false,不能获取任何数据</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;x&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span></span></code></pre></div><h4 id="多表索引优化" tabindex="-1">多表索引优化 <a class="header-anchor" href="#多表索引优化" aria-label="Permalink to &quot;多表索引优化&quot;">​</a></h4><blockquote><p>索引往哪张表加？</p></blockquote><ol><li>小表驱动大表</li><li>索引建立经常使用的字段上</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 小表：10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 大表：300</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 对于双层循环来说:一般建议 将数据小的循环 放外层;数据大的循环 放内层</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 当编写 ...on t.cid = c.cid 时，将数据量小的表 放左边，即小表驱动大表</span></span></code></pre></div><ol start="3"><li>复合索引不能使用不等于(!= 或者 &lt;&gt;)或 is null (is not null)，否则自身以及右侧所有全部失效</li></ol><blockquote><p>sql 优化，是一种概率层面的优化。至于是否实际使用了这些优化，需要通过explain进行查看，才能确定。是否走了索引。因为mysql 优化器会分析走索引的行数和表的总行数，如果走索引的行数占表中总行数的比例很大，才会走索引，否则不会走索引，这也叫索引失效。</p></blockquote><p><em>一般情况下，对于左链接，给左表加索引；右连接，给右表加索引</em></p><ul><li>对于复合索引来说，如果左边失效，右侧全部失效</li></ul><h4 id="避免索引失效的一些原则" tabindex="-1">避免索引失效的一些原则 <a class="header-anchor" href="#避免索引失效的一些原则" aria-label="Permalink to &quot;避免索引失效的一些原则&quot;">​</a></h4><h5 id="_1-不要跨列或无序使用-最佳左前缀" tabindex="-1">1. 不要跨列或无序使用(最佳左前缀) <a class="header-anchor" href="#_1-不要跨列或无序使用-最佳左前缀" aria-label="Permalink to &quot;1. 不要跨列或无序使用(最佳左前缀)&quot;">​</a></h5><h5 id="_2-尽量使用全索引匹配-把索引全部用上" tabindex="-1">2. 尽量使用全索引匹配，把索引全部用上 <a class="header-anchor" href="#_2-尽量使用全索引匹配-把索引全部用上" aria-label="Permalink to &quot;2. 尽量使用全索引匹配，把索引全部用上&quot;">​</a></h5><h5 id="_3-不要在索引列上做任何操作-计算、函数、类型转换-会导致索引失效而转向全表扫描" tabindex="-1">3. 不要在索引列上做任何操作(计算、函数、类型转换)，会导致索引失效而转向全表扫描 <a class="header-anchor" href="#_3-不要在索引列上做任何操作-计算、函数、类型转换-会导致索引失效而转向全表扫描" aria-label="Permalink to &quot;3. 不要在索引列上做任何操作(计算、函数、类型转换)，会导致索引失效而转向全表扫描&quot;">​</a></h5><h5 id="_4-尽量使用索引覆盖using-index-只访问索引的查询-索引列和查询列一致-减少select" tabindex="-1">4. 尽量使用索引覆盖<code>using index</code>(只访问索引的查询(索引列和查询列一致)，减少select * ) <a class="header-anchor" href="#_4-尽量使用索引覆盖using-index-只访问索引的查询-索引列和查询列一致-减少select" aria-label="Permalink to &quot;4. 尽量使用索引覆盖\`using index\`(只访问索引的查询(索引列和查询列一致)，减少select * )&quot;">​</a></h5><h5 id="_5-like-尽量以-常量-开头-不要以通配符开头-否则索引失效" tabindex="-1">5. like 尽量以&quot;常量&quot;开头，不要以通配符开头，否则索引失效 <a class="header-anchor" href="#_5-like-尽量以-常量-开头-不要以通配符开头-否则索引失效" aria-label="Permalink to &quot;5. like 尽量以&quot;常量&quot;开头，不要以通配符开头，否则索引失效&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%x%&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- name索引失效</span></span></code></pre></div><h5 id="_6-尽量不要使用类型转换-显示、隐式-否则索引失效" tabindex="-1">6. 尽量不要使用类型转换(显示、隐式)，否则索引失效 <a class="header-anchor" href="#_6-尽量不要使用类型转换-显示、隐式-否则索引失效" aria-label="Permalink to &quot;6. 尽量不要使用类型转换(显示、隐式)，否则索引失效&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- 程序底层将 123 转换为 &#39;123&#39;，即进行了类型转换</span></span></code></pre></div><h5 id="_7-尽量不要使用or-否则索引失效" tabindex="-1">7. 尽量不要使用or, 否则索引失效 <a class="header-anchor" href="#_7-尽量不要使用or-否则索引失效" aria-label="Permalink to &quot;7. 尽量不要使用or, 否则索引失效&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> teacher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tcid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 将 or 左侧的 name 索引失效</span></span></code></pre></div><h5 id="_8-一些其它的优化方法" tabindex="-1">8. 一些其它的优化方法 <a class="header-anchor" href="#_8-一些其它的优化方法" aria-label="Permalink to &quot;8. 一些其它的优化方法&quot;">​</a></h5><h6 id="_1-exist和in" tabindex="-1">1. exist和in <a class="header-anchor" href="#_1-exist和in" aria-label="Permalink to &quot;1. exist和in&quot;">​</a></h6><blockquote><p>如果主查询的数据集大，则使用in;如果子查询的数据集大，则使用exist</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- exist：将主查询的结果，放到子查询结果中进行条件校验，条件成立则保留，条件不成立则丢弃</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- select ... from table where exist (子查询)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- in:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- select ... from table where tid in (1, 3, 5);</span></span></code></pre></div><h6 id="_2-order-by-优化" tabindex="-1">2. order by 优化 <a class="header-anchor" href="#_2-order-by-优化" aria-label="Permalink to &quot;2. order by 优化&quot;">​</a></h6><p>using filesort 有两种算法:双路排序、单路排序(根据I0的次数) MySQL4.1之前 默认使用 双路排序; MySQL4.1之后默认使用 单路排序 ; 注意:单路排序比双路排序会占用更多的buffer。 单路排序在使用时，如果数据大，可以考虑调大buffer的容量大小: <code>set max_length_for_sort_data = 2048;</code> 如果max length for_sort data值太低，则mysq1会自动从 单路-&gt;双路(太低:需要排序的列的总长度大于max_length_for_sort_data )</p><p>提高<code>orderby</code>查询的策略: a. 选择使用单路、双路，调整buffer的容量大小 b. 避免select * c. 复合索引不要跨列使用, 避免usingc filesort d. 保证全部的排序字段 排序的一致性(都是升序或降序)</p><h5 id="_9-慢查询日志" tabindex="-1">9. 慢查询日志 <a class="header-anchor" href="#_9-慢查询日志" aria-label="Permalink to &quot;9. 慢查询日志&quot;">​</a></h5><blockquote><p>MySql 提供的一种日志记录，用于记录MySql中响应时间超过阈值的sql语句，怛查询日志默认是关闭的。</p></blockquote><blockquote><p>检查是否开启了慢查询日志：<code>show variables like &#39;%slow_query_log%&#39;;</code></p></blockquote><blockquote><p>临时开启：</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slow_query_log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开启慢查询日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">restart</span></span></code></pre></div><blockquote><p>永久开启：</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- /etc/my.cnf 中追加配置：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- vi /etc/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">slow_query_log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">slow_query_log_file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span></code></pre></div><blockquote><p>慢查询日志的阈值：<code>show variables like &#39;%long_query_time%&#39;;</code></p></blockquote><blockquote><p>临时设置阈值：<code>set global long_query_time = 5;</code>, 单位是秒，设置完毕后，重新登陆后起效(不需要重启服务)</p></blockquote><blockquote><p>永久设置阈值：</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- /etc/my.cnf 中追加配置：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- vi /etc/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">long_query_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><blockquote><p>查看慢sql</p></blockquote><ol><li>慢查询的sql被记录在了日志中，因此可以通过日志查看具体的慢sql</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- cat /var/lib/mysql/mysql-slow.log</span></span></code></pre></div><ol start="2"><li>通过mysqldumpslow工具查看慢sql, 可能通过一些过滤条件，快速查找出需要定位的慢sql</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- mysqldumpslow --help</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- s：排序方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- r：逆序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- l：锁定时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- g：正则匹配模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 获取返回记录最多的3个SQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mysqldumpslow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 获取访问次数最多的3个SQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mysqldumpslow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 按照时间排序，前10条包含left ioin查询语句的SQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mysqldumpslow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;left join&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 语法：mysqldumpslow [options...] [log_file ...]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 语法：mysqldumpslow [各种参数] [慢查询日志的文件]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 如果报错：You have an error in your sql syntax, 说明sql 语句语法有错，需要修改sql语句</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 如果报错：This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable), 则需要修改配置文件：是因为存储过程/存储函数在创建时与之前的开启慢查询日志冲突了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 解决冲突</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--     临时解决(开启 log_bin_trust_function_creators)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%log_bin_trust_function_creators%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_bin_trust_function_creators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 永久解决</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- /etc/my.cnf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- log_bin_trust_function_creators = 1</span></span></code></pre></div><h4 id="分析海量数据" tabindex="-1">分析海量数据 <a class="header-anchor" href="#分析海量数据" aria-label="Permalink to &quot;分析海量数据&quot;">​</a></h4><h5 id="profiles" tabindex="-1">profiles <a class="header-anchor" href="#profiles" aria-label="Permalink to &quot;profiles&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show profiles; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 默认关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%profiling%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查看是否开启</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profiling </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开启</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- show profiles: 会记录所有profiling打开之后的全部sql查询语句所花费的时间。缺点：不够精确,只能看到 总共消费的时间，不能看到各个硬件消费的时间I</span></span></code></pre></div><h5 id="精确分析-sql-诊断" tabindex="-1">精确分析：sql 诊断 <a class="header-anchor" href="#精确分析-sql-诊断" aria-label="Permalink to &quot;精确分析：sql 诊断&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- show profile all for query 上一个查询的query id</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- show profile cpu,block io for query 上一个查询的query id</span></span></code></pre></div><h5 id="全局查询日志" tabindex="-1">全局查询日志 <a class="header-anchor" href="#全局查询日志" aria-label="Permalink to &quot;全局查询日志&quot;">​</a></h5><blockquote><p>记录开启之后的全部sql语句(这次全局的记录操作仅仅在调优、开发过程中打开)</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%general_log%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查看是否开启</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 执行的所有sql 记录在表中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> general_log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开启全局日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;table&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置输出方式为表 将全部的sql记录在表中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开启后，会记录所有sql, 会被记录在 mysql.general_log表中，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- select * from mysql.general_log;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 执行的所有sql 记录在文件中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置输出方式为文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> general_log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 开启全局日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> general_log_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/tmp/mysql.log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 设置日志文件路径</span></span></code></pre></div><h2 id="锁机制" tabindex="-1">锁机制 <a class="header-anchor" href="#锁机制" aria-label="Permalink to &quot;锁机制&quot;">​</a></h2><blockquote><p>解决因资源共享而造成的并发问题 操作类型分类：</p></blockquote><ol><li>读锁(共享锁): 对同一个数据(衣服)，多个读操作可以同时进行，互不干扰</li><li>写锁(互斥锁、排它锁): 如果当前写操作没有完成，则无法进行其他的读操作和写操作(读锁、写锁)</li></ol><blockquote><p>操作范围分类：</p></blockquote><ol><li>表锁: 一次性对一张表整体加锁。如MyISAM存储引擎使用表锁，开销小、加锁快、无死锁；但锁的范围大，容易发生锁冲突、并发度低</li><li>行锁：一次性对一条数据加锁。如InnoDB存储引擎使用行锁，开销大、加锁慢、容易出现死锁，不易发生锁冲突，并发度高</li><li>页锁</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 增加锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- locak table 表名1 read/write, 表名2 read/write ...;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查看加锁的表：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- show open tables;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 释放锁</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tables;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 加读锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话：session, 每一个访问数据的dos命令行、数据库客户端工具都是一个会话</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可以查询 读(查)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 写(增删改) 会等待， 不可以，报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 读，不可以</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 写，不可以</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 如果某一个会话，对A表加了read锁，则该会话可以对A表进行读操作、不能进行写操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 且该会话不能对其他表进行读、写操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 即如果给A表加了read锁，则当前会话只能对A表进行读操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话1：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可以查询 读(查)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 写(增删改) 会等待会话0将锁释放， 不可以，报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 读，可以</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 写，可以</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0给A表加了锁，其他会话的操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1. 可以对其他表(A表以外的表)进行读、写操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2. 对A表：读-可以，写-等待会话0释放锁，不可以</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 加写锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tablelock write;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 当前会话(会话0)可以对加了写锁的表进行任何操作(增删改查)；但是不能操作(增删改查)其他表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 其他会话：对会话0加写锁的表，可以进行增删改查操作的前提是：等待会话0释放锁</span></span></code></pre></div><h3 id="mysql表级锁的锁模式" tabindex="-1">MySql表级锁的锁模式 <a class="header-anchor" href="#mysql表级锁的锁模式" aria-label="Permalink to &quot;MySql表级锁的锁模式&quot;">​</a></h3><p>MyISAM在执行查询语句(select)前，会自动会涉及的所有表加读锁，在执行更新操作(DML)前，会自动给涉及的表加写锁。所以对MyISAM表的读操作，不会阻塞其他会话对同一表的读操作，但会阻塞对同一表的写操作。对MyISAM表进行操作，会有以下情况：</p><ol><li>对MyISAM表进行读操作(加读锁)，不会阻塞其他进程(会话)对同一表的读操作，但会阻塞对同一表的写操作。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对MyISAM表进行写操作(加写锁)，会阻塞其他进程(会话)对同一表的读操作和写操作。只有当写锁释放后，才会执行其它进程的读写操作。</li></ol><h2 id="分析表锁定" tabindex="-1">分析表锁定 <a class="header-anchor" href="#分析表锁定" aria-label="Permalink to &quot;分析表锁定&quot;">​</a></h2><h3 id="查看哪些表加了锁" tabindex="-1">查看哪些表加了锁： <a class="header-anchor" href="#查看哪些表加了锁" aria-label="Permalink to &quot;查看哪些表加了锁：&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tables; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1: 代表被加了锁</span></span></code></pre></div><h3 id="分析表锁定的严重程度" tabindex="-1">分析表锁定的严重程度： <a class="header-anchor" href="#分析表锁定的严重程度" aria-label="Permalink to &quot;分析表锁定的严重程度：&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;table%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Table_locks_immediate: 即可能获取到的锁数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Table_locks_waited: 需要等待的表锁数(如果该值越大，说明表锁越严重)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 一般建议： Table_locks_immediate / Table_locks_waited  &gt; 5000, 建议采用InnoDB存储引擎, 否则采用MyISAM存储引擎</span></span></code></pre></div><h2 id="行锁" tabindex="-1">行锁 <a class="header-anchor" href="#行锁" aria-label="Permalink to &quot;行锁&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- mysql 默认自动commit; oracle 默认手动commit;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 关闭自动提交 (默认开启), 关闭后就相当于加了行锁</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0: 写操作 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话1: 写操作 同样的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ax&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 更新时发现此数据被加锁了，会等待其它会话释放锁，然后更新</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 对行锁情况：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 1. 如果会话x对某条数据a进行DML操作(研究时：关闭了自动commit的情况下)，则其它会话必须等待会话x结束事务(commit/rollback)后，才能对数据a进行操作。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 2. 表锁是通过unlock tables: 释放锁，行锁是通过事务(commit/rollback)释放锁</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0：写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话1： 写操作， 不同的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ax&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 行锁：一次锁一行数据，因此如果操作的是不同数据，则不干扰</span></span></code></pre></div><h3 id="行锁的注意事项" tabindex="-1">行锁的注意事项 <a class="header-anchor" href="#行锁的注意事项" aria-label="Permalink to &quot;行锁的注意事项&quot;">​</a></h3><h4 id="如果没有索引-则行锁会转为表锁" tabindex="-1">如果没有索引，则行锁会转为表锁 <a class="header-anchor" href="#如果没有索引-则行锁会转为表锁" aria-label="Permalink to &quot;如果没有索引，则行锁会转为表锁&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_linelock_name(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0：写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ai&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话1：写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;aiX&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话0：写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ai&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- commit;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 会话1：写操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;aiX&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可以发现，数据被阻塞了(加锁)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 原因：如果索引类发生了类型转换，则索引失效。因此此次操作，会从行锁转为表锁</span></span></code></pre></div><h4 id="行锁的一种特殊情况-间隙锁-值在范围内-但并不存在" tabindex="-1">行锁的一种特殊情况：间隙锁：值在范围内，但并不存在 <a class="header-anchor" href="#行锁的一种特殊情况-间隙锁-值在范围内-但并不存在" aria-label="Permalink to &quot;行锁的一种特殊情况：间隙锁：值在范围内，但并不存在&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 此时linelock表中 id为7的数据不存在</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;x&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 即在id为1和9之间加锁，但并不存在id为7的数据, 则id为7的数据为间隙锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 间隙锁：Mysql会自动给间隙加锁，防止其它会话插入数据，导致数据不一致</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 所以，id为7的数据，被锁住了，其它会话无法插入id为7的数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 行锁：如果有where，则实际加过的范围就是where后面的范围(不是实际的值)</span></span></code></pre></div><h3 id="行锁分析" tabindex="-1">行锁分析 <a class="header-anchor" href="#行锁分析" aria-label="Permalink to &quot;行锁分析&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%innodb_row_lock%&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Innodb_row_lock_current_waits: 当前等待锁的个数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Innodb_row_lock_time: 等待总时长, 从系统启动到现在一共等待的时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Innodb_row_lock_time_avg: 平均等待时长。从系统启动到现在，平均等待的时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Innodb_row_lock_time_max: 最大等待时长。从系统启动到现在，最长一次等待时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Innodb_row_lock_waits: 等待次数。从系统启动到现在，一共等待的次数</span></span></code></pre></div><h3 id="查询行锁" tabindex="-1">查询行锁 <a class="header-anchor" href="#查询行锁" aria-label="Permalink to &quot;查询行锁&quot;">​</a></h3><blockquote><p>如果仅仅是查询数据，会不会加锁呢？</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- set autocommit = 0;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- start transaction;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- begin;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linelock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 通过 for update 对query语句进行加锁。</span></span></code></pre></div><h3 id="行锁结论" tabindex="-1">行锁结论 <a class="header-anchor" href="#行锁结论" aria-label="Permalink to &quot;行锁结论&quot;">​</a></h3><p>InnoDB默认采用行锁 缺点：比表锁性能损耗大。 优点：并发能力强帖，效率高。 因此建议，高并发用InnoDB，低并发用MyISAM</p>`,151),t=[h];function e(k,p,r,d,g,o){return i(),a("div",null,t)}const E=s(n,[["render",e]]);export{c as __pageData,E as default};

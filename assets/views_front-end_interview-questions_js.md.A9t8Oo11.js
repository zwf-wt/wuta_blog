import{_ as s,o as i,c as a,R as n}from"./chunks/framework._BfTlsgw.js";const g=JSON.parse('{"title":"JS相关面试题","description":"","frontmatter":{},"headers":[],"relativePath":"views/front-end/interview-questions/js.md","filePath":"views/front-end/interview-questions/js.md"}'),l={name:"views/front-end/interview-questions/js.md"},h=n(`<h1 id="js相关面试题" tabindex="-1">JS相关面试题 <a class="header-anchor" href="#js相关面试题" aria-label="Permalink to &quot;JS相关面试题&quot;">​</a></h1><h2 id="_1-如何判断一个数据是nan" tabindex="-1">1. 如何判断一个数据是<code>NaN</code> <a class="header-anchor" href="#_1-如何判断一个数据是nan" aria-label="Permalink to &quot;1. 如何判断一个数据是\`NaN\`&quot;">​</a></h2><p><code>NaN</code>表示非数字,但是用<code>typeof</code>检测是<code>number</code>类型</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// number</span></span></code></pre></div><blockquote><p>所以利用<code>NaN</code>的定义： 用<code>typeof</code>判断是否为<code>number</code>类型并且判断是否满足<code>isnan</code> 利用<code>NaN</code>是唯一个不等于任何自身的特点<code>n !== n</code></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;是否是NaN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否是NaN, true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="_2-js-中-null-和-undefined-区别" tabindex="-1">2. JS 中 <code>null</code> 和 <code>undefined</code> 区别 <a class="header-anchor" href="#_2-js-中-null-和-undefined-区别" aria-label="Permalink to &quot;2. JS 中 \`null\` 和 \`undefined\` 区别&quot;">​</a></h2><ul><li>相同点: 用<code>if</code>判断时，两者都会被转换成<code>false</code></li><li>不同点: <ol><li><code>number</code>转换的值不同<code>Number(null)</code> 为<code>0</code>, <code>Number(undefined)</code>为<code>NaN</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><ol start="2"><li><code>Null</code> 表示一个值被定义了，但是这个值是空值</li><li><code>Undefined</code> 变量声明但未赋值</li></ol></li></ul><h2 id="_3-闭包是什么-有什么特性-对页面会有什么影响" tabindex="-1">3. 闭包是什么?有什么特性? 对页面会有什么影响 <a class="header-anchor" href="#_3-闭包是什么-有什么特性-对页面会有什么影响" aria-label="Permalink to &quot;3. 闭包是什么?有什么特性? 对页面会有什么影响&quot;">​</a></h2><blockquote><p>闭包可以简单理解成: 定义在一个函数内部的函数。其中一个内部函数在包含它们的外部函数之外被调用时，就会形成闭包</p></blockquote><blockquote><p>特点:</p></blockquote><ol><li>函数嵌套函数</li><li>函数内部可以引用外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收。</li></ol><blockquote><p>使用:</p></blockquote><ol><li>读取函数内部的变量;</li><li>这些变量的值始终保持在内存中，不会在外层函数调用后被自动清除</li></ol><blockquote><p>优点:</p></blockquote><ol><li>变量长期驻扎在内存中</li><li>避免全局变量的污染</li><li>私有成员的存在</li></ol><blockquote><p>缺点:会造成内存泄露</p></blockquote><blockquote><p>为什么要用闭包</p></blockquote><ul><li>匿名自执行函数: 我们知道所有的变量，如果不加上 var 关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如: 别的函数可能误用这些变量，造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。</li></ul><blockquote><p>除了每次使用变量都是用 var 关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护可以用闭包。</p></blockquote><ul><li>结果缓存: 我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留</li></ul><h2 id="_4-js-中常见的内存泄漏" tabindex="-1">4. Js 中常见的内存泄漏 <a class="header-anchor" href="#_4-js-中常见的内存泄漏" aria-label="Permalink to &quot;4. Js 中常见的内存泄漏&quot;">​</a></h2><ol><li>意外的全局变量</li><li>被遗忘的计时器或回调函数</li><li>脱离<code>DOM</code>的引用</li><li>闭包</li></ol><h2 id="_5-es6-新特性" tabindex="-1">5. ES6 新特性 <a class="header-anchor" href="#_5-es6-新特性" aria-label="Permalink to &quot;5. ES6 新特性&quot;">​</a></h2><ol><li><code>const</code>和<code>let</code></li><li>模板字符串</li><li>箭头函数</li><li>函数的参数默认值</li><li>对象和数组解构</li><li><code>for...of</code>和<code>for...in</code></li><li><code>ES6</code>中的类</li><li><code>Promise</code></li></ol><h2 id="_6-let-与-var-与-const-的区别" tabindex="-1">6. let 与 var 与 const 的区别 <a class="header-anchor" href="#_6-let-与-var-与-const-的区别" aria-label="Permalink to &quot;6. let 与 var 与 const 的区别&quot;">​</a></h2><ul><li><code>var</code>声明的变量会挂载在<code>window</code>上，而<code>let</code>和<code>const</code>声明的变量不会</li><li><code>var</code>声明的变量存在变量提升,<code>let</code>和<code>const</code>不存在变量提升</li><li>同一作用域下<code>var</code>可以声明同名变量,<code>let</code>和<code>const</code>不可以</li><li><code>let</code>和<code>const</code>声明会形成块级作用域</li><li><code>const</code>一旦声明必须赋值，不能用<code>null</code>占位，声明后不能再修改，如果声明的是复合类型数据，可以修改属性</li></ul><h2 id="_7-普通函数和构造函数的区别" tabindex="-1">7.普通函数和构造函数的区别 <a class="header-anchor" href="#_7-普通函数和构造函数的区别" aria-label="Permalink to &quot;7.普通函数和构造函数的区别&quot;">​</a></h2><ol><li>构造函数也是一个普通函数，创建方式和普通函数一样，但是构造函数习惯上首字母大写</li><li>调用方式不一样，普通函数直接调用，构造函数要用关键字 new 来调用</li><li>调用时，构造函数内部会创建一个新对象，就是实例，普通函数不会创建新对象</li><li>构造函数内部的 this 指向实例，普通函数内部的 this 指向调用函数的对象 (如果没有对象调用，默认为 window)5.构造函数默认的返回值是创建的对象 (也就是实例)，普通函数的返回值由 return 语句决定</li><li>构造函数的函数名与类名相同</li></ol><h2 id="_8-箭头函数与普通函数的区别" tabindex="-1">8. 箭头函数与普通函数的区别 <a class="header-anchor" href="#_8-箭头函数与普通函数的区别" aria-label="Permalink to &quot;8. 箭头函数与普通函数的区别&quot;">​</a></h2><ul><li>箭头函数是匿名函数，不能作为构造函数</li><li>箭头函数不能使用<code>new</code>,</li><li>箭头函数不能绑定<code>arguments</code>，要用<code>rest</code>参数解决</li><li>箭头函数没有原型属性</li><li>箭头函数的<code>this</code>永远指向其上下文的<code>this</code></li><li>箭头函数不能绑定<code>this</code>，会捕获其所在的上下文的<code>this</code>值，作为自己的<code>this</code>值</li></ul><h2 id="_9-请简述原型-原型链-原型-继承" tabindex="-1">9. 请简述原型/原型链/(原型) 继承 <a class="header-anchor" href="#_9-请简述原型-原型链-原型-继承" aria-label="Permalink to &quot;9. 请简述原型/原型链/(原型) 继承&quot;">​</a></h2><h3 id="_1-什么是原型" tabindex="-1">1. 什么是原型: <a class="header-anchor" href="#_1-什么是原型" aria-label="Permalink to &quot;1. 什么是原型:&quot;">​</a></h3><p>任何对象实例都有一个原型，也叫原型对象，这个原型对象由对象的内置属性 <code>_proto_</code> 指向它的构造函数的<code>prototype</code>指向的对象，即任何对象都是由一个构造函数创建的，但是不是每一个对象都有<code>prototype</code>只有方法才有<code>prototype</code></p><h3 id="_2-什么是原型链" tabindex="-1">2. 什么是原型链? <a class="header-anchor" href="#_2-什么是原型链" aria-label="Permalink to &quot;2. 什么是原型链?&quot;">​</a></h3><p>原型链基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。我们知道，每个构造函数都有一个原型对象，每个原型对象都有一个指向构造函数的指针，而实例又包涵一个指向原型对象的内部指针。 原型链的核心就是依赖对象的<code>_proto_</code>的指向，当自身不存在的属性时，就一层层的扒出创建对象的构造函数，直至到<code>Object</code>时，就没有<code>_proto_</code>指向了。因为<code>_proto_</code>实质找的是<code>prototype</code>，所以我们只要找这个链条上的构造函数的<code>prototype</code>。其中<code>Object.prototype</code> 是没有<code>_proto_</code> 属性的，它==<code>null</code>.</p><h3 id="_3-原型-继承" tabindex="-1">3. (原型) 继承 <a class="header-anchor" href="#_3-原型-继承" aria-label="Permalink to &quot;3. (原型) 继承&quot;">​</a></h3><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含指向原型对象内部的指针。我们让原型对象 (1)等于另一个原型对象的实例(2)此时原型对象 (2) 将包含一个指向原型对象 (1) 的指针再让原型对象(2)的实例等于原型对象 (3)，如此层层递进就构成了实例和原型的链条，这就是原型链的概念每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数想指针(constructon)，而实例对象都包含一个指向原型对象的内部指针(proto )。如果让原型对象等于另一个原型对象的实例，此时的原型对象将包含一个指向另一个原型的指针( proto )，另一个原型也包含着一个指向另一个构造函数的指针(constructor)。假如另个原型又是另一个类型的实例......这就构成了实例与原型的链条。也叫原型链原型继承是jis 的一种继承方式，原型链作为实现继承的主要方法,其基本思路是利用原型让一个引用类型继承另一个引用类型的属性和方法原型继承:利用原型中的成员可以被和其相关的对象共享这一特性，可以实现继承，这种实现继承的方式，就叫做原型继承.</p><h2 id="_10-继承" tabindex="-1">10. 继承 <a class="header-anchor" href="#_10-继承" aria-label="Permalink to &quot;10. 继承&quot;">​</a></h2><h3 id="_1-原型链继承-prototype-inheritance-这是-javascript-中最基本的继承方式-通过将子类的原型指向父类的实例来实现继承。示例代码如下" tabindex="-1">1. 原型链继承（Prototype Inheritance）： 这是 JavaScript 中最基本的继承方式，通过将子类的原型指向父类的实例来实现继承。示例代码如下： <a class="header-anchor" href="#_1-原型链继承-prototype-inheritance-这是-javascript-中最基本的继承方式-通过将子类的原型指向父类的实例来实现继承。示例代码如下" aria-label="Permalink to &quot;1. 原型链继承（Prototype Inheritance）： 这是 JavaScript 中最基本的继承方式，通过将子类的原型指向父类的实例来实现继承。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><h3 id="_2-构造函数继承-constructor-inheritance-通过在子类的构造函数中调用父类的构造函数来实现继承。示例代码如下" tabindex="-1">2. 构造函数继承（Constructor Inheritance）： 通过在子类的构造函数中调用父类的构造函数来实现继承。示例代码如下： <a class="header-anchor" href="#_2-构造函数继承-constructor-inheritance-通过在子类的构造函数中调用父类的构造函数来实现继承。示例代码如下" aria-label="Permalink to &quot;2. 构造函数继承（Constructor Inheritance）： 通过在子类的构造函数中调用父类的构造函数来实现继承。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><ol start="3"><li>组合继承（Combination Inheritance）： 结合原型链继承和构造函数继承的方式，使子类既能继承父类的属性和方法，又能保持独立的实例。示例代码如下:</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><h3 id="_4-原型式继承-prototype-chain-inheritance-通过使用一个空对象作为中介-将父类的实例作为子类的原型来实现继承。示例代码如下" tabindex="-1">4. 原型式继承（Prototype Chain Inheritance）： 通过使用一个空对象作为中介，将父类的实例作为子类的原型来实现继承。示例代码如下： <a class="header-anchor" href="#_4-原型式继承-prototype-chain-inheritance-通过使用一个空对象作为中介-将父类的实例作为子类的原型来实现继承。示例代码如下" aria-label="Permalink to &quot;4. 原型式继承（Prototype Chain Inheritance）： 通过使用一个空对象作为中介，将父类的实例作为子类的原型来实现继承。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><h3 id="_5-寄生式继承-parasitic-inheritance-在原型式继承的基础上-增强子类对象-并返回一个新的对象以实现继承。示例代码如下" tabindex="-1">5. 寄生式继承（Parasitic Inheritance）： 在原型式继承的基础上，增强子类对象，并返回一个新的对象以实现继承。示例代码如下： <a class="header-anchor" href="#_5-寄生式继承-parasitic-inheritance-在原型式继承的基础上-增强子类对象-并返回一个新的对象以实现继承。示例代码如下" aria-label="Permalink to &quot;5. 寄生式继承（Parasitic Inheritance）： 在原型式继承的基础上，增强子类对象，并返回一个新的对象以实现继承。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Meow, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Meow, I&#39;m Tom</span></span></code></pre></div><h3 id="_6-寄生组合式继承-parasitic-combination-inheritance-在组合继承的基础上-优化父类构造函数的调用-避免在子类原型中创建无用的属性和方法。示例代码如下" tabindex="-1">6. 寄生组合式继承（Parasitic Combination Inheritance）： 在组合继承的基础上，优化父类构造函数的调用，避免在子类原型中创建无用的属性和方法。示例代码如下： <a class="header-anchor" href="#_6-寄生组合式继承-parasitic-combination-inheritance-在组合继承的基础上-优化父类构造函数的调用-避免在子类原型中创建无用的属性和方法。示例代码如下" aria-label="Permalink to &quot;6. 寄生组合式继承（Parasitic Combination Inheritance）： 在组合继承的基础上，优化父类构造函数的调用，避免在子类原型中创建无用的属性和方法。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Super</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><h3 id="_7-es6-的-class-继承-在-es6-中引入了-class-关键字来定义类和继承关系-使用-extends-关键字来实现继承。示例代码如下" tabindex="-1">7. ES6 的 class 继承： 在 ES6 中引入了 class 关键字来定义类和继承关系，使用 extends 关键字来实现继承。示例代码如下： <a class="header-anchor" href="#_7-es6-的-class-继承-在-es6-中引入了-class-关键字来定义类和继承关系-使用-extends-关键字来实现继承。示例代码如下" aria-label="Permalink to &quot;7. ES6 的 class 继承： 在 ES6 中引入了 class 关键字来定义类和继承关系，使用 extends 关键字来实现继承。示例代码如下：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m Tom</span></span></code></pre></div><h2 id="_11-promise-的理解" tabindex="-1">11. Promise 的理解 <a class="header-anchor" href="#_11-promise-的理解" aria-label="Permalink to &quot;11. Promise 的理解&quot;">​</a></h2><ol><li>什么是<code>Promise</code>? 我们都知道，<code>Promise</code>是承诺的意思，承诺它过一段时间会给你一个结果。 <code>Promise</code>是一种解决异步编程的方案，相比回调函数和事件更合理和更强大。 从语法上讲，promise 是一个对象，从它可以获取异步操作的消息</li><li><code>promise</code>有三种状态: <code>pending</code>初始状态也叫等待状态，<code>fulfiled</code>成功状态,<code>rejected</code>失败状态;状态一旦改变,就不会再变。创造<code>promise</code>实例后，它会立即执行</li><li><code>Promise</code>的两个特点</li></ol><ul><li><code>Promise</code>对象的状态不受外界影响</li><li><code>Promise</code>的状态一旦改变，就不会再变，任何时候都可以得到这个结果，状态不可以逆</li></ul><ol start="4"><li><code>Promise</code>的二个缺点</li></ol><ul><li>无法取消<code>Promise</code>,一旦新建它就会立即执行，无法中途取消</li><li>如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反映到外部</li><li>当处于<code>pending</code>(等待)状态时，无法得知目前进展到哪一个阶段是刚刚开始还是即将完成</li></ul><h2 id="_12-一个页面从输入-url-页面加载显示完成-这个过程中都发生了什么" tabindex="-1">12. 一个页面从输入 URL 页面加载显示完成，这个过程中都发生了什么? <a class="header-anchor" href="#_12-一个页面从输入-url-页面加载显示完成-这个过程中都发生了什么" aria-label="Permalink to &quot;12. 一个页面从输入 URL 页面加载显示完成，这个过程中都发生了什么?&quot;">​</a></h2><p>分为4个步骤</p><ol><li>当发送一个<code>URL</code>请求时，不管这个<code>URL</code>是<code>Web</code>页面的<code>URL</code>还是<code>Web</code>页面上每个资源的 <code>URL</code>，浏览器都会开启一个线程来处理这个请求，同时在远程<code>DNS</code>服务器上启动一个<code>DNS</code>查询。这能使浏览器获得请求对应的<code>IP</code>地址</li><li>浏览器与远程<code>Web</code>服务器通过<code>TCP</code>三次握手协商来建立一个<code>TCP/IP</code>连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这二个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，然后服务器响应并接受客户端的请求，最后由客户端发出该请求已经被接受的报文</li><li>一旦<code>TCP/IP</code>连接建立，浏览器会通过该连接向远程服务器发送<code>HTTP</code>的<code>GET</code>请求。远程服务器找到资源并使用<code>HTTP</code>响应返回该资源</li><li>此时，<code>Web</code>服务器提供资源服务，客户端开始下载资源</li></ol><h2 id="_13-get-请求传参长度的误" tabindex="-1">13. get 请求传参长度的误 <a class="header-anchor" href="#_13-get-请求传参长度的误" aria-label="Permalink to &quot;13. get 请求传参长度的误&quot;">​</a></h2><p>误区: 我们经常说<code>get</code>请求参数的大小存在限制，而<code>post</code>请求的参数大小是无限制的。实际上<code>HTTP</code>协议从未规定<code>GET/POST</code>的请求长度限制是多少。对<code>get</code>请求参数的限制是来源与浏览器或<code>web</code>服务器，浏览器或<code>web</code>服务器限制了<code>url</code>的长度。为了明确这个概念，我们必须再次强调下面几点<code>HTTP</code>协议 未规定<code>GET</code>和<code>POST</code>的长度限制<code>GET</code>的最大长度显示是因为 浏览器和<code>web</code>服务器限制了<code>URI</code>的长度不同的浏览器和<code>WEB</code>服务器，限制的最大长度不一样要支持<code>IE</code>，则最大长度为<code>2083byte</code>，若只支持<code>Chrome</code>，则最大长度<code>8182byte</code></p><h2 id="_14-get-和-post-请求在缓存方面的区别" tabindex="-1">14. get 和 post 请求在缓存方面的区别 <a class="header-anchor" href="#_14-get-和-post-请求在缓存方面的区别" aria-label="Permalink to &quot;14. get 和 post 请求在缓存方面的区别&quot;">​</a></h2><p><code>post/get</code> 的请求区别，具体不再整述补充补充个<code>get</code>和<code>post</code>在缓存方面的区别:</p><ul><li><code>get</code>请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。</li><li><code>post</code>不同，<code>post</code>做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。</li></ul><blockquote><p>因此<code>get</code>请求适合于请求缓存</p></blockquote><h2 id="_15-js-的-new-操作符做了哪些事情" tabindex="-1">15. JS 的 new 操作符做了哪些事情 <a class="header-anchor" href="#_15-js-的-new-操作符做了哪些事情" aria-label="Permalink to &quot;15. JS 的 new 操作符做了哪些事情&quot;">​</a></h2><p><code>new</code>操作符新建了一个空对象，这个对象原型指向构造函数的<code>prototype</code>，执行构造函数后返回这个对象</p><h2 id="_16-改变函数内部-this-指针的指向函数-bind-apply-call-的区别" tabindex="-1">16. 改变函数内部 this 指针的指向函数 (bind，apply，call 的区别) <a class="header-anchor" href="#_16-改变函数内部-this-指针的指向函数-bind-apply-call-的区别" aria-label="Permalink to &quot;16. 改变函数内部 this 指针的指向函数 (bind，apply，call 的区别)&quot;">​</a></h2><p>通过<code>apply</code>和<code>call</code>改变函数的<code>this</code>指向，他们两个函数的第一个参数都是一样的表示要改变指向的那个对象,第二个参数,<code>apply</code>是数组，而<code>call</code>则是<code>arg1,arg2...</code>这种形式。通过 <code>bind</code>改变<code>this</code>作用域会返回一个新的函数，这个函数不会马上执行</p><h2 id="_17-js-的各种位置-比-clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop-的区别" tabindex="-1">17. JS 的各种位置，比 clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop 的区别? <a class="header-anchor" href="#_17-js-的各种位置-比-clientheight-scrollheight-offsetheight-以及scrolltop-offsettop-clienttop-的区别" aria-label="Permalink to &quot;17. JS 的各种位置，比 clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop 的区别?&quot;">​</a></h2><ul><li><code>clientHeight</code>: 表示的是可视区域的高度，不包含<code>border</code>和滚动条</li><li><code>offsetHeight</code>: 表示可视区域的高度，包合了<code>border</code>和滚动条</li><li><code>scrollHeight</code>: 表示了所有区域的高度，包含了因为滚动被隐藏的部分</li><li><code>clientTop</code>: 表示边框 <code>border</code> 的厚度，在未指定的情况下一般为<code>O</code></li><li><code>scrollTop</code>: 滚动后被隐藏的高度，获取对象相对于由 <code>offsetParent</code> 属性指定的父坐标(<code>css</code> 定位的元素或 <code>body</code> 元素)距离顶端的高度</li></ul><h2 id="_18-为什么会造成跨域-请简述同源策略" tabindex="-1">18. 为什么会造成跨域/请简述同源策略 <a class="header-anchor" href="#_18-为什么会造成跨域-请简述同源策略" aria-label="Permalink to &quot;18. 为什么会造成跨域/请简述同源策略&quot;">​</a></h2><h3 id="_1-为什么会造成跨域" tabindex="-1">1. 为什么会造成跨域? <a class="header-anchor" href="#_1-为什么会造成跨域" aria-label="Permalink to &quot;1. 为什么会造成跨域?&quot;">​</a></h3><p>在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。在请求的过程中我们要想回去数据 般都是<code>post/get</code>请求所以..跨域问题出现跨域问题来源于<code>JavaScript</code>的同源策略，即只有 <code>协议+主机名+端口号(如存在)</code>相同，则允许相互访问。也就是说 <code>JavaScript</code>只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。</p><h3 id="_2-同源策略" tabindex="-1">2. 同源策略 <a class="header-anchor" href="#_2-同源策略" aria-label="Permalink to &quot;2. 同源策略&quot;">​</a></h3><p>是由 NetScape 提出的一个著名的安全策略。所谓的同源，指的是<code>协议，域名，端口</code>相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读写对方的资源。</p><h2 id="_19-请输出三种减少页面加载时间的方式" tabindex="-1">19. 请输出三种减少页面加载时间的方式 <a class="header-anchor" href="#_19-请输出三种减少页面加载时间的方式" aria-label="Permalink to &quot;19. 请输出三种减少页面加载时间的方式&quot;">​</a></h2><ol><li><p>优化图片</p></li><li><p>图像格式的选择(GIF: 提供的颜色较少，可用在-一些对颜色要求不高的地方)</p></li><li><p>优化 CSS (压缩合并 css，如 margin-top, margin-left...)</p></li><li><p>网址后加斜杠(如www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。)一cdn 托管</p></li><li><p>标明高度和宽度(如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影影响浏览体验 当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了)</p></li><li><p>减少 http 请求 (合并文件，合并图片)</p></li></ol><h2 id="_20-this-指向" tabindex="-1">20. this 指向 <a class="header-anchor" href="#_20-this-指向" aria-label="Permalink to &quot;20. this 指向&quot;">​</a></h2><p>= 在<code>JavaScript</code>中，<code>this</code>通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象</p><ul><li>全局的<code>this</code>&gt;指向的是<code>Window</code></li><li>对象中的<code>this</code>指向其本身</li><li>事件中<code>this</code>&gt;指向事件对象</li></ul><h2 id="_21-for-循环与-map-循环有什么区别" tabindex="-1">21. For 循环与 map 循环有什么区别 <a class="header-anchor" href="#_21-for-循环与-map-循环有什么区别" aria-label="Permalink to &quot;21. For 循环与 map 循环有什么区别&quot;">​</a></h2><ul><li><code>For</code>遍历对象自身的和继承可枚举的属性，也就是说会包括哪些原型链上的属性</li><li><code>Map</code>方法不会对空数组进行检测，<code>map</code> 会返回一个新数组，不会对原数 组产生影响</li></ul><h2 id="_22-重绘和回流是什么" tabindex="-1">22. 重绘和回流是什么 <a class="header-anchor" href="#_22-重绘和回流是什么" aria-label="Permalink to &quot;22. 重绘和回流是什么&quot;">​</a></h2><ul><li>回流:当<code>render tree</code>中的 部分或者全部因为元素的规模尺寸，布局隐藏等改变而需要重新构建，这就叫回流，每个页面至少需要一次回流就是在页面第一次加载的时候，这时候一定会发生回流，因为要构建<code>render tree</code></li><li>在回流的时候，浏览器会使渲染树中收到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中这就是重绘 当<code>rendertree</code>中的一些元素需要更新属性，而这些属性只是影响元素的外观，不会影响布局，就叫重绘</li></ul><h2 id="_23-http-协议和https-区别" tabindex="-1">23. HTTP 协议和HTTPS 区别 <a class="header-anchor" href="#_23-http-协议和https-区别" aria-label="Permalink to &quot;23. HTTP 协议和HTTPS 区别&quot;">​</a></h2><ul><li><code>http</code>是超文本传输协议，信息是明文传输，<code>https</code>是具有安全性的<code>ssl</code>解密传输协议</li><li><code>http</code>和<code>https</code>连接方式完全不同,端口也不同,<code>http</code>是<code>80</code>,<code>https</code>是<code>443</code></li><li><code>http</code>的连接很简单，是无状态的，<code>https</code>协议是由<code>ssl+http</code>协议构建的可进行加密传输，身份认证的网络协议，比<code>http</code>协议安全</li></ul><h2 id="_24-什么是-js-内存泄露" tabindex="-1">24. 什么是 js 内存泄露? <a class="header-anchor" href="#_24-什么是-js-内存泄露" aria-label="Permalink to &quot;24. 什么是 js 内存泄露?&quot;">​</a></h2><p>内存泄漏是指一块被分配的内存既不能使用又不能回收，直到浏览器进程结束 释放内存的方法: 赋值为<code>null</code></p><h2 id="_25-http常见状态码" tabindex="-1">25. HTTP常见状态码？ <a class="header-anchor" href="#_25-http常见状态码" aria-label="Permalink to &quot;25. HTTP常见状态码？&quot;">​</a></h2><ul><li><code>100</code>: 这个状态码是告诉客户端应该继续发送请求，这个临时响应是用来通知客户端的，部分的请求服务器已经接受，但是客户端应继续发送求请求的剩余部分，如果请求已经完成，就忽略这个响应，而且服务器会在请求完成后向客户发送一个最终的结果</li><li><code>200</code>: 这个是最常见的 <code>http</code> 状态码，表示服务器已经成功接受请求，并将返回客广端所请求的最终结果</li><li><code>202</code>: 表示服务器已经接受了请求，但是还没有处理，而且这个请求最终会不会处理还不确定</li><li><code>204</code>: 服务器成功处理了请求，但没有返回任何实体内容 ，可能会返回新的头部元信息</li><li><code>301</code>: 客户端请求的网页已经永久移动到新的位置，当链接发生变化时返回 <code>301</code> 代码告诉客户端链接的变化，客户端保存新的链接，并向新的链接发出请求，已返回请求结果</li><li><code>404</code>: 请求失败，客户端请求的资源没有找到或者是不存在</li><li><code>500</code>: 服务器遇到未知的错误，导致无法完成客户端当前的请求.</li><li><code>503</code>: 服务器由于临时的服务器过载或者是维护，无法解决当前的请求</li></ul><h2 id="_26-预加载和懒加载的区别-预加载在什么时间加载合适" tabindex="-1">26. 预加载和懒加载的区别，预加载在什么时间加载合适 <a class="header-anchor" href="#_26-预加载和懒加载的区别-预加载在什么时间加载合适" aria-label="Permalink to &quot;26. 预加载和懒加载的区别，预加载在什么时间加载合适&quot;">​</a></h2><ul><li>预加载是指在页面加载完成之前，提前将所需资源下载，之后使用的时候从缓存中调用。</li><li>懒加载是延迟加载，按照一定的条件或者需求等到满足条件的时候再加载对应的资源</li></ul><blockquote><p>两者主要区别是一个是提前加载，一个是迟缓其至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p></blockquote><h2 id="_27-js-的函数节流和函数防抖的区别" tabindex="-1">27. Js 的函数节流和函数防抖的区别 <a class="header-anchor" href="#_27-js-的函数节流和函数防抖的区别" aria-label="Permalink to &quot;27. Js 的函数节流和函数防抖的区别&quot;">​</a></h2><ul><li>函数节流是指一定时间内<code>js</code>方法只执行一次, 函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码次</li><li>函数节流是 声明一个变量当标志位，记录当前代码是否在执行，如果正在执行，取消这次方法执行，直接<code>return</code>，如果空闲，正常触发方法执行</li><li>函数防抖是需要一个延时器来辅助实现，延迟执行需要执行的代码，如果方法多次触发，把上次记录的迟执行代码用<code>cleartimeout</code>清除掉重新开始，如果计时完毕，没有方法来访问触发，则执行代码</li></ul><h2 id="_28-get-和-post-不同" tabindex="-1">28.Get 和 post 不同 <a class="header-anchor" href="#_28-get-和-post-不同" aria-label="Permalink to &quot;28.Get 和 post 不同&quot;">​</a></h2><p><code>Get</code> 是从服务器上获取数据，<code>post</code> 是向服务器传送数据在客户端，<code>get</code>通过<code>url</code> 提交数据，数据在<code>url</code> 中可以看到，<code>post</code> 方式数据放在 <code>html header</code> 中提交安全性问题 <code>Get</code>提交数据最多只能有 <code>1024</code> 字节，<code>post</code> 没有限制</p><h2 id="_29-什么是-csrf-攻击" tabindex="-1">29.什么是 csrf 攻击 <a class="header-anchor" href="#_29-什么是-csrf-攻击" aria-label="Permalink to &quot;29.什么是 csrf 攻击&quot;">​</a></h2><p>Csrf (跨站点请求伪造) 攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份再攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的</p><h2 id="_30-1-2-3-map-parseint-答案是多少" tabindex="-1">30. [1, 2, 3].map(parseInt) 答案是多少 <a class="header-anchor" href="#_30-1-2-3-map-parseint-答案是多少" aria-label="Permalink to &quot;30. [1, 2, 3].map(parseInt) 答案是多少&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 这是因为你在使用 map() 方法时传递的回调函数是 parseInt。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * map() 方法会对数组中的每个元素都调用一次指定的回调函数，并返回一个新数组，其中包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 含回调函数的返回值。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在 parseInt 函数中，它接收两个参数：要解析的字符串和解析的基数（可选，默认为十进* 制）。在 map() 中，当前元素会作为第一个参数传递给 parseInt，而当前元素的索引则会* 作为第二个参数（即基数）传递给 parseInt。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 让我们来逐个解析 [1, 2, 3].map(parseInt) 的步骤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 第一个元素是 1，将其作为字符串 &quot;1&quot; 传递给 parseInt，解析的基数为 0（索引）。在基* 数为 0 的情况下，parseInt(&quot;1&quot;, 0) 会将字符串解析为十进制数，结果为 1。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 第二个元素是 2，将其作为字符串 &quot;2&quot; 传递给 parseInt，解析的基数为 1（索引）。在基* 数为 1 的情况下，parseInt(&quot;2&quot;, 1) 会尝试将字符串解析为一进制数，但是一进制中只能 * 用 0 表示数字，因此解析失败，返回 NaN。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 第三个元素是 3，将其作为字符串 &quot;3&quot; 传递给 parseInt，解析的基数为 2（索引）。在基* 数为 2 的情况下，parseInt(&quot;3&quot;, 2) 会尝试将字符串解析为二进制数，但是二进制数中只* 能使用 0 和 1 表示数字，因此解析失败，返回 NaN。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 所以最终得到的结果是 [1, NaN, NaN]。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  如果你想得到期望的结果 [1, 2, 3]，你可以使用箭头函数或指定回调函数的参数来忽略基* 数的影响，例如 [1, 2, 3].map(num =&gt; parseInt(num)) 或 [1, 2, 3].map((num, *       index) =&gt; parseInt(num))。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseInt)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, NaN, NaN]</span></span></code></pre></div><h2 id="_31-object-create-null-和-区别" tabindex="-1">31. <code>Object.create(null)</code>和<code>{}</code>区别？ <a class="header-anchor" href="#_31-object-create-null-和-区别" aria-label="Permalink to &quot;31. \`Object.create(null)\`和\`{}\`区别？&quot;">​</a></h2><p><code>Object.create(null)</code>创建一个没有原型的新对象。这意味着生成的对象没有继承的属性或方法。它通常用作简单的字典对象，因为它允许设置和访问键，而不会与继承的属性或方法发生任何潜在冲突。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回了一个没有任何属性的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p><code>{}</code>用<code>object</code>创建了一个新对象。<code>{}</code>的原型是<code>Object.prototype</code>。这意味着生成的对象继承了<code>Object.prototype</code>的所有属性和方法。这在某些情况下是有用的，但如果不小心，也可能导致意想不到的行为。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h2 id="_32-函数防抖" tabindex="-1">32. 函数防抖 <a class="header-anchor" href="#_32-函数防抖" aria-label="Permalink to &quot;32. 函数防抖&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timerId;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return 返回的函数一定不要用箭头函数，因为保证 this 一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timerId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // setTimeout 一定要用箭头函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, duration);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,111),e=[h];function t(p,k,d,o,r,E){return i(),a("div",null,e)}const y=s(l,[["render",t]]);export{g as __pageData,y as default};

import{_ as s,o as i,c as a,R as e}from"./chunks/framework.H90atOJc.js";const g=JSON.parse('{"title":"js语法篇","description":"","frontmatter":{},"headers":[],"relativePath":"views/interview-questions/js/js_basic.md","filePath":"views/interview-questions/js/js_basic.md"}'),n={name:"views/interview-questions/js/js_basic.md"},l=e('<h1 id="js语法篇" tabindex="-1">js语法篇 <a class="header-anchor" href="#js语法篇" aria-label="Permalink to &quot;js语法篇&quot;">​</a></h1><h2 id="_1-基础语法篇" tabindex="-1">1. 基础语法篇 <a class="header-anchor" href="#_1-基础语法篇" aria-label="Permalink to &quot;1. 基础语法篇&quot;">​</a></h2><h3 id="_1-如何判断一个数据是nan" tabindex="-1">1. 如何判断一个数据是<code>NaN</code> <a class="header-anchor" href="#_1-如何判断一个数据是nan" aria-label="Permalink to &quot;1. 如何判断一个数据是`NaN`&quot;">​</a></h3><p><code>NaN</code>表示非数字,但是用<code>typeof</code>检测是<code>number</code>类型</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// number</span></span></code></pre></div><blockquote><p>所以利用<code>NaN</code>的定义： 用<code>typeof</code>判断是否为<code>number</code>类型并且判断是否满足<code>isnan</code> 利用<code>NaN</code>是唯一个不等于任何自身的特点<code>n !== n</code></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;是否是NaN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否是NaN, true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><h3 id="_2-js-中-null-和-undefined-区别" tabindex="-1">2. JS 中 <code>null</code> 和 <code>undefined</code> 区别 <a class="header-anchor" href="#_2-js-中-null-和-undefined-区别" aria-label="Permalink to &quot;2. JS 中 `null` 和 `undefined` 区别&quot;">​</a></h3><ul><li>相同点: 用<code>if</code>判断时，两者都会被转换成<code>false</code></li><li>不同点: <ol><li><code>number</code>转换的值不同<code>Number(null)</code> 为<code>0</code>, <code>Number(undefined)</code>为<code>NaN</code></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><ol start="2"><li><code>Null</code> 表示一个值被定义了，但是这个值是空值</li><li><code>Undefined</code> 变量声明但未赋值</li></ol></li></ul>',9),t=[l];function h(k,d,p,o,c,r){return i(),a("div",null,t)}const u=s(n,[["render",h]]);export{g as __pageData,u as default};

import{_ as a,o as e,c as t,R as r}from"./chunks/framework.H90atOJc.js";const m=JSON.parse('{"title":"适配器模式","description":"","frontmatter":{},"headers":[],"relativePath":"views/design-pattern/structural/adapter.md","filePath":"views/design-pattern/structural/adapter.md"}'),o={name:"views/design-pattern/structural/adapter.md"},i=r('<h1 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h1><h2 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h2><p>适配器模式是一种常见的设计模式，它的作用是将一个类的接口转换成客户端所期望的另一个接口。此模式可以用来解决两个已有接口之间不兼容的问题，也可以用来重新设计旧系统，使之能够与新系统兼容。适配器模式有三种实现方式：类适配器、对象适配器和接口适配器。 适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper) 适配器模式属于结构型模式 主要分为三类：类适配器模式、对象适配器模式、接口适配器模式</p><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><h3 id="类适配器模式" tabindex="-1">类适配器模式 <a class="header-anchor" href="#类适配器模式" aria-label="Permalink to &quot;类适配器模式&quot;">​</a></h3><h3 id="对象适配器模式" tabindex="-1">对象适配器模式 <a class="header-anchor" href="#对象适配器模式" aria-label="Permalink to &quot;对象适配器模式&quot;">​</a></h3><h3 id="接口适配器模式" tabindex="-1">接口适配器模式 <a class="header-anchor" href="#接口适配器模式" aria-label="Permalink to &quot;接口适配器模式&quot;">​</a></h3>',7),n=[i];function s(d,h,l,c,_,p){return e(),t("div",null,n)}const f=a(o,[["render",s]]);export{m as __pageData,f as default};

import{_ as a,o as s,c as e,R as t}from"./chunks/framework._BfTlsgw.js";const b=JSON.parse('{"title":"常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"views/git/common_command.md","filePath":"views/git/common_command.md"}'),n={name:"views/git/common_command.md"},i=t(`<h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><h2 id="_1-初始化项目" tabindex="-1">1. 初始化项目 <a class="header-anchor" href="#_1-初始化项目" aria-label="Permalink to &quot;1. 初始化项目&quot;">​</a></h2><blockquote><p>初始化一个Git仓库(git init)</p></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git init</span></span></code></pre></div><h2 id="_2-提交相关" tabindex="-1">2. 提交相关 <a class="header-anchor" href="#_2-提交相关" aria-label="Permalink to &quot;2. 提交相关&quot;">​</a></h2><h3 id="_2-1-提交到暂存区" tabindex="-1">2.1 提交到暂存区 <a class="header-anchor" href="#_2-1-提交到暂存区" aria-label="Permalink to &quot;2.1 提交到暂存区&quot;">​</a></h3><blockquote><p>git add <code>&lt;file&gt;</code>: 将某个文件添加到暂存区</p></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add 文件名</span></span>
<span class="line"><span>git add *</span></span></code></pre></div><h3 id="_2-2-填写提交信息" tabindex="-1">2.2 填写提交信息 <a class="header-anchor" href="#_2-2-填写提交信息" aria-label="Permalink to &quot;2.2 填写提交信息&quot;">​</a></h3><blockquote><p>git commit：将暂存区的文件提交到本地仓库，并添加提交信息</p></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit -m &#39;信息&#39;:</span></span></code></pre></div><h3 id="_2-3-提交远程" tabindex="-1">2.3 提交远程 <a class="header-anchor" href="#_2-3-提交远程" aria-label="Permalink to &quot;2.3 提交远程&quot;">​</a></h3><blockquote><p>git push origin <code>&lt;your_branch_name&gt;:&lt;remote_branch_name&gt;</code></p></blockquote><ul><li>origin 表示你要将代码推送到的远程仓库的名称，也就是你最初克隆代码的那个远程仓库。</li><li><code>&lt;your_branch_name&gt;</code> 表示你本地分支的名称。</li><li><code>&lt;remote_branch_name&gt;</code> 表示你要将代码推送到远程仓库中的分支名称</li></ul><p><strong>如果本地分支的名称和远程分支的名称相同，可以不写远程分支名称</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 将本地master分支的内容提交到远程分支</span></span>
<span class="line"><span>git push origin master</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 将本地分支名为 feature_branch, 推送到远程主分支main</span></span>
<span class="line"><span>git push origin feature_branch:main</span></span></code></pre></div><h3 id="_2-4-拉取" tabindex="-1">2.4 拉取 <a class="header-anchor" href="#_2-4-拉取" aria-label="Permalink to &quot;2.4 拉取&quot;">​</a></h3><blockquote><p>git pull：拉取远程仓库的最新代码</p></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git pull</span></span></code></pre></div><h2 id="_3-分支管理" tabindex="-1">3. 分支管理 <a class="header-anchor" href="#_3-分支管理" aria-label="Permalink to &quot;3. 分支管理&quot;">​</a></h2><h3 id="_3-1-创建分支" tabindex="-1">3.1 创建分支 <a class="header-anchor" href="#_3-1-创建分支" aria-label="Permalink to &quot;3.1 创建分支&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 使用branch创建分支</span></span>
<span class="line"><span>git branch &#39;开发分支&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用switch创建分支</span></span>
<span class="line"><span>git switch &#39;功能分支&#39;</span></span></code></pre></div><h3 id="_3-2-切换分支" tabindex="-1">3.2 切换分支 <a class="header-anchor" href="#_3-2-切换分支" aria-label="Permalink to &quot;3.2 切换分支&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 切换分支</span></span>
<span class="line"><span>git checkout &#39;开发分支&#39;</span></span>
<span class="line"><span>git switch &#39;开发分支&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用 chceckout 创建并切换分支</span></span>
<span class="line"><span>git checkout -b &#39;开发分支&#39;</span></span>
<span class="line"><span>// 使用switch创建并切换分支</span></span>
<span class="line"><span>git switch -c &#39;测试分支&#39;</span></span></code></pre></div><h2 id="_4-合并分支" tabindex="-1">4. 合并分支 <a class="header-anchor" href="#_4-合并分支" aria-label="Permalink to &quot;4. 合并分支&quot;">​</a></h2><blockquote><ol><li>git merge <code>&lt;branch name&gt;</code>：将指定分支合并到当前分支</li></ol></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 当前分支是 开发分支，要将 功能分支 合并到 开发分支</span></span>
<span class="line"><span>git merge &#39;功能分支&#39;</span></span></code></pre></div><blockquote><ol start="2"><li>git rebase <code>&lt;target_branch&gt;</code></li></ol></blockquote><p>git rebase 命令可以用于将一个分支的提交合并到另一个分支上，并保持提交历史的线性。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 当前分支是 功能分支，要将 功能分支提交合并到开发分支</span></span>
<span class="line"><span>git rebase &#39;开发分支&#39;</span></span>
<span class="line"><span>// Git 将会按顺序逐个将 &lt;feature_branch&gt; 上的提交应用到 &lt;target_branch&gt; 上。如果在应用提交时发生冲突，Git 会提示你解决冲突。</span></span>
<span class="line"><span>git rebase --continue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 如果需要中断 rebase 操作</span></span>
<span class="line"><span>git rebase --abort</span></span></code></pre></div><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><h3 id="_1-查看历史提交记录" tabindex="-1">1. 查看历史提交记录 <a class="header-anchor" href="#_1-查看历史提交记录" aria-label="Permalink to &quot;1. 查看历史提交记录&quot;">​</a></h3><blockquote><p>git log：查看提交历史</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git log --oneline</span></span></code></pre></div><h3 id="_2-克隆" tabindex="-1">2. 克隆 <a class="header-anchor" href="#_2-克隆" aria-label="Permalink to &quot;2. 克隆&quot;">​</a></h3><blockquote><p>git clone <code>&lt;repository url&gt;</code>：克隆远程仓库到本地</p></blockquote><blockquote><p>git clone -b <code>&lt;branch_name&gt; &lt;remote_repository_url&gt;</code>: 克隆远程仓库的指定分支</p></blockquote><h3 id="_3-将本地仓库与远程仓库关联" tabindex="-1">3. 将本地仓库与远程仓库关联 <a class="header-anchor" href="#_3-将本地仓库与远程仓库关联" aria-label="Permalink to &quot;3. 将本地仓库与远程仓库关联&quot;">​</a></h3><blockquote><p>git remote add origin <code>&lt;repository url&gt;</code></p></blockquote><h3 id="_4-回退到指定的提交版本" tabindex="-1">4. 回退到指定的提交版本 <a class="header-anchor" href="#_4-回退到指定的提交版本" aria-label="Permalink to &quot;4. 回退到指定的提交版本&quot;">​</a></h3><blockquote><p>git reset <code>&lt;commit&gt;</code></p></blockquote><h3 id="_5-将当前工作区的修改储存起来-以便后续恢复或者应用到其他分支上" tabindex="-1">5. 将当前工作区的修改储存起来，以便后续恢复或者应用到其他分支上 <a class="header-anchor" href="#_5-将当前工作区的修改储存起来-以便后续恢复或者应用到其他分支上" aria-label="Permalink to &quot;5. 将当前工作区的修改储存起来，以便后续恢复或者应用到其他分支上&quot;">​</a></h3><blockquote><p>git stash</p></blockquote>`,43),l=[i];function o(p,c,r,h,d,u){return s(),e("div",null,l)}const m=a(n,[["render",o]]);export{b as __pageData,m as default};

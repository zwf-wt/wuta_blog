import{_ as a,o as e,c as l,k as i,t,R as s}from"./chunks/framework._BfTlsgw.js";const v=JSON.parse('{"title":"Vue面试题","description":"","frontmatter":{},"headers":[],"relativePath":"views/front-end/interview-questions/vue.md","filePath":"views/front-end/interview-questions/vue.md"}'),n={name:"views/front-end/interview-questions/vue.md"},h=s("",50),p=i("li",null,[i("p",null,"Observer观察者。Vue 通过 Observer 对数据对象的所有属性进行监听，当把一个普通对象传给 Vue 实例的 data 选项时，Observer 将遍历它的所有属性，并为其添加 getter 和 setter。getter 将收集此属性所有的订阅者，setter 将在属性发生变动的时候，重新为此属性赋值，并通知订阅者调用其对应的更新函数。 在 Vue 2 中是通过 ES5 的 Object.defineProperty() 方法实现。 在 Vue 3 中是通过 ES6 的 new Proxy() 实现的。")],-1),k=i("li",null,[i("p",null,"Watcher发布者/订阅者。Watcher 作为连接 Observer 和 Compiler 的桥梁，能够订阅并收到每个属性变动的通知，然后执行相应的回调函数。Compiler 在编译时通过 Watcher 绑定对应的数据更新回调函数，Observer 在监听到数据变化时执行此回调。在 Observer 中，Watcher 就是订阅者，在 Compiler 中，Watcher 就是发布者。")],-1),r=s("",101);function o(d,c,E,u,g,y){return e(),l("div",null,[h,i("ul",null,[p,i("li",null,[i("p",null,"Compiler模板编译器。它的作用是对每个元素节点的指令 v- 和模板语法 "+t()+" 进行扫描，替换对应的真实数据，或绑定相应的事件函数。",1)]),k]),r])}const F=a(n,[["render",o]]);export{v as __pageData,F as default};

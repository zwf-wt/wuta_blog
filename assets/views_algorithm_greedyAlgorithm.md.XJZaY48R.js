import{_ as a,o as e,c as r,R as t}from"./chunks/framework.MMMQMGZx.js";const p=JSON.parse('{"title":"贪心算法","description":"","frontmatter":{},"headers":[],"relativePath":"views/algorithm/greedyAlgorithm.md","filePath":"views/algorithm/greedyAlgorithm.md"}'),o={name:"views/algorithm/greedyAlgorithm.md"},i=t('<h1 id="贪心算法" tabindex="-1">贪心算法 <a class="header-anchor" href="#贪心算法" aria-label="Permalink to &quot;贪心算法&quot;">​</a></h1><p>贪心算法(英语:greedy algorithm)，又称贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优(即最有利)的选择，从而希望导致结果是最好或最优的算法。 贪心:当下做局部最优判断，不会回退</p><p>回溯:能够回退撤销选择</p><p>看这个算法的名字:贪心，贪婪，两个字的含义最关键，好像一个贪婪的人所有事情都只想到眼，看不到长远，也不为最终的结果和将来着想，贪图眼前局部的利益最大化。</p><p>贪心算法可以解决一些最优化问题，比如:求图的最小生成树，求哈夫曼编码等等。然后对于工-些问题，贪心法一般不能得到我们想要的最终答案，因为每一步都找局部最优并不一定导致全局最优。</p><h2 id="面试实战" tabindex="-1">面试实战 <a class="header-anchor" href="#面试实战" aria-label="Permalink to &quot;面试实战&quot;">​</a></h2><h3 id="_455" tabindex="-1">455 <a class="header-anchor" href="#_455" aria-label="Permalink to &quot;455&quot;">​</a></h3><h3 id="_122" tabindex="-1">122 <a class="header-anchor" href="#_122" aria-label="Permalink to &quot;122&quot;">​</a></h3><h3 id="_55" tabindex="-1">55 <a class="header-anchor" href="#_55" aria-label="Permalink to &quot;55&quot;">​</a></h3><h3 id="_45" tabindex="-1">45 <a class="header-anchor" href="#_45" aria-label="Permalink to &quot;45&quot;">​</a></h3><h3 id="_860" tabindex="-1">860 <a class="header-anchor" href="#_860" aria-label="Permalink to &quot;860&quot;">​</a></h3><h3 id="_322" tabindex="-1">322 <a class="header-anchor" href="#_322" aria-label="Permalink to &quot;322&quot;">​</a></h3>',12),h=[i];function l(d,n,s,_,c,m){return e(),r("div",null,h)}const b=a(o,[["render",l]]);export{p as __pageData,b as default};

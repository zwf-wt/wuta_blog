import{_ as s,o as a,c as i,R as t}from"./chunks/framework.MMMQMGZx.js";const F=JSON.parse('{"title":"NestJS","description":"","frontmatter":{},"headers":[],"relativePath":"views/front-end/node/nest.md","filePath":"views/front-end/node/nest.md"}'),l={name:"views/front-end/node/nest.md"},e=t(`<h1 id="nestjs" tabindex="-1">NestJS <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;NestJS&quot;">​</a></h1><h2 id="全局安装cli" tabindex="-1">全局安装CLI <a class="header-anchor" href="#全局安装cli" aria-label="Permalink to &quot;全局安装CLI&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nextjs/cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project-name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-spec</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start:dev</span></span></code></pre></div><h2 id="restful-api" tabindex="-1">RESTFUL API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;RESTFUL API&quot;">​</a></h2><ul><li>接口的一种风格 RESTful API需要设计序言、全局(错误码、请求Base、Proxy等)参数、修改记录以及按照功能划分的接口描述</li><li>接口描述</li><li>请求URL</li><li>请求方式：POST/GET/PUT/DELETE</li><li>参数：Body或者Params或者Headers参数(JWT Token)及参数说明</li><li>返回示例</li><li>返回参数说明</li></ul><h3 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><h4 id="简要描述" tabindex="-1">简要描述 <a class="header-anchor" href="#简要描述" aria-label="Permalink to &quot;简要描述&quot;">​</a></h4><ul><li>用户注册接口</li></ul><h4 id="请求url" tabindex="-1">请求URL <a class="header-anchor" href="#请求url" aria-label="Permalink to &quot;请求URL&quot;">​</a></h4><ul><li>/api/user/register</li></ul><h4 id="请求方式" tabindex="-1">请求方式 <a class="header-anchor" href="#请求方式" aria-label="Permalink to &quot;请求方式&quot;">​</a></h4><ul><li>POST</li></ul><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table><thead><tr><th>参数名</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>是</td><td>string</td><td>用户名</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr><tr><td>nickname</td><td>是</td><td>string</td><td>昵称</td></tr></tbody></table><h4 id="返回示例" tabindex="-1">返回示例 <a class="header-anchor" href="#返回示例" aria-label="Permalink to &quot;返回示例&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;注册成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;nickname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;管理员&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;avatar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.xxx.com/avatar.png&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="返回参数说明" tabindex="-1">返回参数说明 <a class="header-anchor" href="#返回参数说明" aria-label="Permalink to &quot;返回参数说明&quot;">​</a></h4><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>状态码</td></tr><tr><td>msg</td><td>string</td><td>返回信息</td></tr><tr><td>data</td><td>object</td><td>返回数据</td></tr><tr><td>data.id</td><td>integer</td><td>用户ID</td></tr><tr><td>data.username</td><td>string</td><td>用户名</td></tr><tr><td>data.nickname</td><td>string</td><td>昵称</td></tr><tr><td>data.avatar</td><td>string</td><td>头像地址</td></tr></tbody></table><h4 id="备注" tabindex="-1">备注 <a class="header-anchor" href="#备注" aria-label="Permalink to &quot;备注&quot;">​</a></h4><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="工程目录" tabindex="-1">工程目录 <a class="header-anchor" href="#工程目录" aria-label="Permalink to &quot;工程目录&quot;">​</a></h3><p>约定大于配置</p><ul><li>src <ul><li>core 核心代码</li><li>common 公共 <ul><li>middleward 中间件</li><li>interceptors 拦截器</li><li>guards 守卫</li></ul></li><li>user <ul><li>interceptors (scoped interceptors)</li><li>user.controller.ts</li><li>user.module.ts</li></ul></li><li>store <ul><li>store.controller.ts</li><li>store.model.ts</li></ul></li></ul></li></ul><h3 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h3><h4 id="总则" tabindex="-1">总则 <a class="header-anchor" href="#总则" aria-label="Permalink to &quot;总则&quot;">​</a></h4><ul><li>坚持每个文件只定义一样东西(例如服务或组件)</li><li>考虑把文件大小限制在 400 行代码以内</li><li>坚持定义简单函数</li><li>考虑限制在75行之内</li></ul><h4 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h4><p>坚持所有箱号使用一致的命名规则 坚持遵循同一个模式来描述符号的特性和类型</p><h4 id="使用点和横杠来分隔文件名" tabindex="-1">使用点和横杠来分隔文件名 <a class="header-anchor" href="#使用点和横杠来分隔文件名" aria-label="Permalink to &quot;使用点和横杠来分隔文件名&quot;">​</a></h4><p>坚持在描述性名字中，用横杠来分隔单词 坚持使用点来分隔描述性名字和类型 坚持遵循先描述组件特性，再描述它的类型的模式，例如：user.model.ts、feature.type.ts 坚持使用惯用的后缀来描述类型，包括 <em>.service、</em>.component、*.pipe、.module、.directive. 必要时可以创建更多类型名，但必须注意，不要创建太多</p><p>angular代码风格</p>`,31),n=[e];function h(r,d,p,k,o,c){return a(),i("div",null,n)}const E=s(l,[["render",h]]);export{F as __pageData,E as default};

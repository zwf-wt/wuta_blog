import{_ as t,o as a,c as e,R as r}from"./chunks/framework.MMMQMGZx.js";const u=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"views/design-pattern/index.md","filePath":"views/design-pattern/index.md"}'),i={name:"views/design-pattern/index.md"},l=r('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><h2 id="_1-设计模式分类" tabindex="-1">1. 设计模式分类 <a class="header-anchor" href="#_1-设计模式分类" aria-label="Permalink to &quot;1. 设计模式分类&quot;">​</a></h2><h3 id="_1-创建型设计模式-creational-patterns" tabindex="-1">1. 创建型设计模式（Creational Patterns） <a class="header-anchor" href="#_1-创建型设计模式-creational-patterns" aria-label="Permalink to &quot;1. 创建型设计模式（Creational Patterns）&quot;">​</a></h3><ol><li>单例模式（Singleton Pattern）</li><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ol><h3 id="_2-结构型设计模式-structural-patterns" tabindex="-1">2. 结构型设计模式（Structural Patterns） <a class="header-anchor" href="#_2-结构型设计模式-structural-patterns" aria-label="Permalink to &quot;2. 结构型设计模式（Structural Patterns）&quot;">​</a></h3><ol start="6"><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ol><h3 id="_3-行为型设计模式-behavioral-patterns" tabindex="-1">3. 行为型设计模式（Behavioral Patterns） <a class="header-anchor" href="#_3-行为型设计模式-behavioral-patterns" aria-label="Permalink to &quot;3. 行为型设计模式（Behavioral Patterns）&quot;">​</a></h3><ol start="13"><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板方法模式（Template Method Pattern）</li><li>访问者模式（Visitor Pattern）</li></ol>',8),n=[l];function o(s,d,c,P,h,_){return a(),e("div",null,n)}const m=t(i,[["render",o]]);export{u as __pageData,m as default};

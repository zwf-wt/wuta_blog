import{_ as s,o as i,c as a,R as t}from"./chunks/framework.MMMQMGZx.js";const y=JSON.parse('{"title":"指标","description":"","frontmatter":{},"headers":[],"relativePath":"views/front-end/performance-optimization/indicator.md","filePath":"views/front-end/performance-optimization/indicator.md"}'),n={name:"views/front-end/performance-optimization/indicator.md"},l=t(`<h1 id="指标" tabindex="-1">指标 <a class="header-anchor" href="#指标" aria-label="Permalink to &quot;指标&quot;">​</a></h1><p>所有的优化都是为了用户体验考虑的</p><h2 id="_1-指标" tabindex="-1">1. 指标 <a class="header-anchor" href="#_1-指标" aria-label="Permalink to &quot;1. 指标&quot;">​</a></h2><h3 id="_1-常规指标" tabindex="-1">1. 常规指标 <a class="header-anchor" href="#_1-常规指标" aria-label="Permalink to &quot;1. 常规指标&quot;">​</a></h3><ol><li><p>FP: first print: 首次渲染时间 首次绘制包括了任何用户自定义的背景绘制，它是将第一个像素绘制到屏幕的时刻，用于应用页面，用户在视觉上首次出瑞不同于跳转之前的内容时间点，或者说是页面发生第一次绘制的时间点</p></li><li><p>FCP: first contentful paint: 首次内容绘制时间 指浏览器完成渲染 DOM 中第一个内容的时间点，这个元素可以是任何文本、图像、SVG 或者其他任何元素，此时用户应该在视觉上有直观的感受</p></li><li><p>FMP: first meaningful paint: 首次有意义绘制时间 指页面关镇元素渲染时间。这个概念并没有标准化定义，因为关键元素可以由开发者自己定义， 究竟什么是&quot;有意义&quot;的内容，只有开发者或者产品经理自己了解</p></li><li><p>TTI: time to interactive: 可交互时间 顾名思义，也就是用户可以下应用进行交互的时间。一般来说，我们认为为 domready 的时间，因为我们通常会在这时候绑定事件操作。如果页面中涉及交互的脚本没有下载完成，那么当然没有到达所谓的用户可交互时间。那么如何定义 domready 时间呢？</p></li><li><p>TTFB: time to first byte: 首字节时间(网络请求耗时) TTFB 是发出页面请求到接收到就答数据第一个字节所花费的毫秒数</p></li><li><p>LCP: largest contentful paint: 最大内容绘制时间 衡量页面的加载体验，它表示视口内可见的最大内容元素的渲染时间。相比 FCP, 这个指标可以更加真实地反映具体内容加载速度。比如，如果页面渲染前有一个 loading 动画，那么 FCP 可能会以 loading 动画出现的时间为准，而 LCP 则会以 loading 动画之后的内容加载时间为准。</p></li><li><p>FID: first input delay: 首次输入延迟 衡量可交互性，它表示用户和页面进行首次交互操作所花费的时间，它比TTL 更加提前，这个阶段虽然页面已经显示出部分内容，但并不能完全具备可交互性，对于用户的响应可能会有较大的延迟。</p></li><li><p>CLS: cumulative layout shift: 累积布局偏移 衡量视觉稳定性，表示页面的整个生命周期中，发生的每个意外的样式移动的所有单独布局更改得分的总和。所以这个分数当然越小越好。</p></li><li><p>TBT: total blocking time: 总阻塞</p></li><li><p>DCL: dom content loaded: 首次渲染时间</p></li><li><p>L: DOM onLoad</p></li></ol><p>12 . 总下载时间 页面所有资源加载完成所需要的时间。一般可以统计 window.onload 事件触发的时间, 这样可以统计出同步加载的资源全部加载完的耗时。如果页面存在较多异步渲染，也可以将异步渲染全部完成的时间作为总下载时间</p><h3 id="_1-2-如何获取这些指标" tabindex="-1">1.2 如何获取这些指标 <a class="header-anchor" href="#_1-2-如何获取这些指标" aria-label="Permalink to &quot;1.2 如何获取这些指标&quot;">​</a></h3><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>navigationStart</td><td>加载起始时间，如果没有前一个页面的unload,则与fetchStart值相等</td></tr><tr><td>redirectStart</td><td>重定向开始时间(如果发生了HTTP重定向，每次重定向都和当前文档同域的话，就返回开始重定义的fetchStart的值。其他发问，则返回0)</td></tr><tr><td>redirectEnd</td><td>重定向结束时间(如果发生了HTTP重定向，每次重定向都和当前文档同域的话，就返回最后一次重定向接受完数据的时间。其他情况返回0)</td></tr><tr><td>fetchStart</td><td>fetchStart 浏览器发起资源请求时，如果有缓存，则返回读取缓存的开始时间</td></tr><tr><td>domainLookupStart</td><td>DNS 域名开始查询的时间，如果有本地的缓存或 keep-alive等，则返回 fetchStart</td></tr><tr><td>domainLookupEnd</td><td>domainLookupEnd 查询DNS的结束时间。如果没有发起DNS请求，同上</td></tr><tr><td>connectStart</td><td>TCP开始建议连接时间，如果有本地的缓存或keep-alive等，则与fetchStart值相等</td></tr><tr><td>secureConnectionStart</td><td>https 连接开始的时间，如果不是安全连接则为0</td></tr><tr><td>connectEnd</td><td>TCP 完成握手的时间，如果有本地的缓存或 keep-alive等，则与 connectStart值相等</td></tr><tr><td>requestStart</td><td>HTTP 请求读取真实文档开始的时间，包括从本地缓存读取</td></tr><tr><td>requestEnd</td><td>HTTP 请求读取真实文档结束的时间，包括从本地缓存读取</td></tr><tr><td>responseStart</td><td>返回浏览器从服务器收到(或从本地缓存读取)第一个字节是的 Unix 毫秒时间戳</td></tr><tr><td>responseEnd</td><td>返回浏览器从服务器收到(或从本在缓存读取，或从本地资源读取)最后一个字节时的 Unix 毫秒时间戳</td></tr><tr><td>uploadEventStart</td><td>前一个页面的unload的时间戳如果没有则为0</td></tr><tr><td>uploadEventEnd</td><td>与unloadEventStart相对应，返回的是unload函数执行完成的时间戳</td></tr><tr><td>domLoading</td><td>这是当前网页DOM结构开始解析时的时间戳，是整个过程的起始时间戳，浏览器即将开始解析第一批收到的HTML文档字节，此时document.readState变成loading，并将抛出 readyStateChange事件</td></tr><tr><td>domInteractive</td><td>返回当前网页DOM结构结束解析、开始加载内嵌资源的时间戳，document.readyState变成interactive,并将抛出readyStateChange事件(注意只是DOM树解析完成，这时候并没有开始加载网页内的资源)</td></tr><tr><td>domContentLoadedEventStart</td><td>网页domContentLoaded事件发生的时间</td></tr><tr><td>domContentLoadedEventEnd</td><td>网页 domContentLoaded事件脚本执行完毕的时间，domReady的时间</td></tr><tr><td>domComplete</td><td>DOM 树解析完成，且资源也准备就绪的时间，domcument.readyState变成complete,并将抛出readystatechange事件</td></tr><tr><td>loadEventStart</td><td>load事件发送给文档，也即load回调函数开始执行的时间</td></tr><tr><td>loadEventEnd</td><td>load回调函数执行完成的时间</td></tr></tbody></table><h3 id="_1-3-相关参数计算" tabindex="-1">1.3 相关参数计算 <a class="header-anchor" href="#_1-3-相关参数计算" aria-label="Permalink to &quot;1.3 相关参数计算&quot;">​</a></h3><table><thead><tr><th>字段</th><th>描述</th><th>计算方式</th><th>意义</th></tr></thead><tbody><tr><td>unload</td><td>前一个页面卸载耗时</td><td>unloadEventEnd - unloadEventStart</td><td>-</td></tr><tr><td>redirect</td><td>重定向耗时</td><td>redirectEnd - redirectStart</td><td>重定向的时间</td></tr><tr><td>appCache</td><td>缓存耗时</td><td>domainLookupStart —— fetchStart</td><td>读取缓存的时间</td></tr><tr><td>dns</td><td>DNS解析耗时</td><td>dominsLookupEnd - domsinLookupStart</td><td>可观察域名解析服务是否正常</td></tr><tr><td>tcp</td><td>TCP 连接耗时</td><td>connectEnd - connectStart</td><td>建立连接的耗时</td></tr><tr><td>ssl</td><td>SSL 安全连接耗时</td><td>connectEnd - secureConnectionStart</td><td>反映数据安全连接建立耗时</td></tr><tr><td>ttfb</td><td>Time to First Byte(TTFB)网络请求耗时</td><td>responseStart - requestStart</td><td>TTFB是发出页面请求到接收到应答数据第一个字节所花费的毫秒数</td></tr><tr><td>response</td><td>响应数据传输耗时</td><td>responeseEnd - responseStart</td><td>观察网络是否正常</td></tr><tr><td>dom</td><td>DOM 解析耗时</td><td>domInteractive - responseEnd</td><td>观察DOM结构是否合理，是否有JS阻塞页面解析</td></tr><tr><td>dcl</td><td>DOMContentLoaded事件耗时</td><td>domContentLoadedEventEnd - domContentLoadedEventStart</td><td>当HTML文档被完全加载和解析完成之后，DOMContentLoaded事件被触发，无需等待样式表、图像和子框架的完成加载</td></tr><tr><td>resources</td><td>资源加载耗时</td><td>domComplete - domContentLoaded</td><td>可观察文档流是否过大</td></tr><tr><td>domReady</td><td>DOM阶段渲染耗时</td><td>domConentLoadedEventEnd - fetchStart</td><td>DOM树和页面资源加载完成时间，会触发 domContentLoaded事件</td></tr><tr><td>首次渲染耗时</td><td>首次渲染耗时</td><td>responseEnd-fetchStart</td><td>加载文档到看到第一帧非空图像的时间，也叫白屏时间</td></tr><tr><td>首次可交互时间</td><td>首次可交互时间</td><td>domInteracctive - fetchStart</td><td>DOM树解析完成时间，此时domcument.readyState为interactive</td></tr><tr><td>首包时间耗时</td><td>首包时间</td><td>responseStart - domainLookupStart</td><td>DNS解析到响应返回浏览器第一个字节的时间</td></tr><tr><td>页面完全加载时间</td><td>页面完全加载时间</td><td>loadEventStart - fetchStart</td><td></td></tr><tr><td>onLoad</td><td>onLoad事件耗时</td><td>loadEventEnd - loadEventStart</td><td></td></tr></tbody></table><h3 id="_1-4" tabindex="-1">1.4 <a class="header-anchor" href="#_1-4" aria-label="Permalink to &quot;1.4&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serve </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-serve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> livereload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-livereload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;iife&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;optm&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    babel: ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exclude: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    livereload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    serve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      open: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8866</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      openPage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      contentBase: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FP FCP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ob1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entries.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entries[i].name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;first-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FP:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entries[i].startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (entries[i].name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;first-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FCP:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entries[i].startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ob1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;element&#39;, &#39;event&#39;, &#39;navigation&#39;, &#39;resource&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entryTypes: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LCP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ob2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformanceObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entryList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">observer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entryList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entries);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lastEntry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entries[entries.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Largest Contentful Paint:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastEntry.startTime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ob2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entryType: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    fetchStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    connectEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    connectStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    requestStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    responseStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    responseEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    domLoading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    domInteractive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    domContentLoadedEventStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    domContentLoadedEventEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    loadEventStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.timing;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 毫秒为单位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connectTime(连接耗时)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connectEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ttfbTime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, responseStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;responseTime（响应耗时）&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, responseEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parseDomTime（DOM解析耗时）&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loadEventStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domLoading)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DCL&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, domContentLoadedEventEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> domContentLoadedEventStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TTI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, domInteractive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetchStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loadTime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loadEventStart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetchStart)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lighthouse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lighthouse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lighthouse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chromeLaucher</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chrome-launcher&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 启动一个Chrome</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chrome</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chromeLauncher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logLevel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      output: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      onlyCategories: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;performance&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      port: chrome.port,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 lighthouse 对页面进行计算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lighthouse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 写入报告</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;report.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, report);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chrome.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)()</span></span></code></pre></div><h3 id="各种阶段" tabindex="-1">各种阶段 <a class="header-anchor" href="#各种阶段" aria-label="Permalink to &quot;各种阶段&quot;">​</a></h3><p>Appcache DNS TCP Request Response Processing</p><h2 id="_2-场景-——-需求" tabindex="-1">2. 场景 —— 需求 <a class="header-anchor" href="#_2-场景-——-需求" aria-label="Permalink to &quot;2. 场景 —— 需求&quot;">​</a></h2><h2 id="_3-维度" tabindex="-1">3. 维度 <a class="header-anchor" href="#_3-维度" aria-label="Permalink to &quot;3. 维度&quot;">​</a></h2><h2 id="_4-成本" tabindex="-1">4. 成本 <a class="header-anchor" href="#_4-成本" aria-label="Permalink to &quot;4. 成本&quot;">​</a></h2><h2 id="_5-剖析性能优化的方方页面" tabindex="-1">5. 剖析性能优化的方方页面 <a class="header-anchor" href="#_5-剖析性能优化的方方页面" aria-label="Permalink to &quot;5. 剖析性能优化的方方页面&quot;">​</a></h2><h3 id="维度1-i-o-的维度" tabindex="-1">维度1：I/O 的维度 <a class="header-anchor" href="#维度1-i-o-的维度" aria-label="Permalink to &quot;维度1：I/O 的维度&quot;">​</a></h3><ul><li>App cache 阶段 <ul><li>合理利用缓存 <ul><li>强缓存 <ul><li>expries</li><li>cache-control</li></ul></li><li>协商缓存 <ul><li>last-modified</li><li>etag</li></ul></li></ul></li></ul></li><li>合理利用 webpack 的 hash, 可以实现，让谇缓存的内容缓存</li></ul><h4 id="缓存中的细节" tabindex="-1">缓存中的细节 <a class="header-anchor" href="#缓存中的细节" aria-label="Permalink to &quot;缓存中的细节&quot;">​</a></h4><ol><li>在浏览器中，直接输入的 url 指向的 html, 是不会缓存的。</li><li>合理利用 webpack 的 hash, 可以实现，让该缓存的内容缓存</li><li>CDN 的情况下</li><li>浏览器中如果没有了强缓存中的字段，还会走强缓存吗？肯定的</li></ol><ul><li>DNS 的阶段</li><li>TCP 的阶段 <ul><li>三次握手怎么优化 <ul><li>http 1.0</li><li>http 1.1</li><li>http2</li><li>http3</li></ul></li></ul></li><li>Req, Resp <ul><li>JS 文件加载 <ul><li>aync defer</li></ul></li></ul></li></ul><h4 id="如何让我的包体积-缩小到极致" tabindex="-1">如何让我的包体积，缩小到极致？ <a class="header-anchor" href="#如何让我的包体积-缩小到极致" aria-label="Permalink to &quot;如何让我的包体积，缩小到极致？&quot;">​</a></h4><ul><li>uglify, minify</li><li>runtime 运行时，我的 polyfill, 能够按需加载</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * a 页面中，我用了async / await --- babel --- babel-perset-env --- 转译后的代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * b 页面中，没有用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 根据不同的环境，加载不同的代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><ul><li><p>tree shaking</p></li><li><p>图片格式</p><ul><li>png, jpg, webp, base64</li></ul></li></ul><h4 id="首屏加载内容-如何进一步缩小" tabindex="-1">首屏加载内容，如何进一步缩小 <a class="header-anchor" href="#首屏加载内容-如何进一步缩小" aria-label="Permalink to &quot;首屏加载内容，如何进一步缩小&quot;">​</a></h4><ul><li>code splitting. 代码分割</li></ul><h4 id="processing" tabindex="-1">processing <a class="header-anchor" href="#processing" aria-label="Permalink to &quot;processing&quot;">​</a></h4><ul><li>async defer</li><li>css 要不要放前面</li><li>在不考虑 SSR 的情况下，我的接口请求，是不是可以放在 willMount 里面</li></ul><h3 id="维度2-渲染的维度" tabindex="-1">维度2： 渲染的维度 <a class="header-anchor" href="#维度2-渲染的维度" aria-label="Permalink to &quot;维度2： 渲染的维度&quot;">​</a></h3><h4 id="如何有效的避免频繁操作-dom" tabindex="-1">如何有效的避免频繁操作 dom <a class="header-anchor" href="#如何有效的避免频繁操作-dom" aria-label="Permalink to &quot;如何有效的避免频繁操作 dom&quot;">​</a></h4><ul><li>减少 dom 操作</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="如何避免回流和重绘" tabindex="-1">如何避免回流和重绘？ <a class="header-anchor" href="#如何避免回流和重绘" aria-label="Permalink to &quot;如何避免回流和重绘？&quot;">​</a></h4><h4 id="利用-gpu-加速" tabindex="-1">利用 GPU 加速 <a class="header-anchor" href="#利用-gpu-加速" aria-label="Permalink to &quot;利用 GPU 加速&quot;">​</a></h4><p>requestIdelCallback requestAnimationFrame</p><h3 id="维度3-内存的维度" tabindex="-1">维度3： 内存的维度 <a class="header-anchor" href="#维度3-内存的维度" aria-label="Permalink to &quot;维度3： 内存的维度&quot;">​</a></h3><p>vue2 -&gt; vue3 享元模式 http2 data Object.freeze()</p><h3 id="维度4-cpu的维度" tabindex="-1">维度4： CPU的维度 <a class="header-anchor" href="#维度4-cpu的维度" aria-label="Permalink to &quot;维度4： CPU的维度&quot;">​</a></h3><p>密集计算，能不能用WebAss, Web wroker 后端同学，能不能算好了再给我？</p>`,44),h=[l];function e(p,k,d,r,E,o){return i(),a("div",null,h)}const c=s(n,[["render",e]]);export{y as __pageData,c as default};

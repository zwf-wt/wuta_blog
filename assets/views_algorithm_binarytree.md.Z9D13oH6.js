import{_ as a,o as i,c as l,R as e}from"./chunks/framework.MMMQMGZx.js";const q=JSON.parse('{"title":"二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"views/algorithm/binarytree.md","filePath":"views/algorithm/binarytree.md"}'),t={name:"views/algorithm/binarytree.md"},r=e('<h1 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h1><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ol><li>每个节点都只有有限个子节点或无子节点</li><li>没有父节点的节点称为根节点</li><li>每一个非根节点有且只有一个父节点</li><li>除了根节点外，每个子节点可以分为多个不相交的子树</li><li>树中没有环路连接</li><li>没有父节点的节点称为根节点</li><li>没有子节点的节点称为叶子节点</li></ol><h2 id="性质" tabindex="-1">性质 <a class="header-anchor" href="#性质" aria-label="Permalink to &quot;性质&quot;">​</a></h2><ol><li>节点的高度：节点到叶子节点的最长路径(边数)，所有叶子节点的高度为0。树中节点的最大层次数</li><li>节点的深度：根节点到这个节点所经历的边的个数，根的深度为0。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</li><li>节点的层数：节点的尝试 + 1</li><li>树的高度：根节点的高度</li></ol><h2 id="二叉树-1" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树-1" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><p>每个节点最多有两个&quot;叉&quot;，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。并且，同理可得，二叉树每个节点的左子树和右子树也分别满足二叉树的定义。</p><h2 id="满二叉树" tabindex="-1">满二叉树 <a class="header-anchor" href="#满二叉树" aria-label="Permalink to &quot;满二叉树&quot;">​</a></h2><p>除了叶子节点外，每个节点都有左右两个子节点，这种二叉树称为满二叉树。</p><h2 id="完全二叉树" tabindex="-1">完全二叉树 <a class="header-anchor" href="#完全二叉树" aria-label="Permalink to &quot;完全二叉树&quot;">​</a></h2><ol><li>叶子节点只能出现在最下层和次下层，</li><li>最下层的叶子节点在左侧连续</li><li>并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树称为完全二叉树。</li></ol><p>用数组存储完全二叉树能够有效利用存储空间。 下标 2 * k + 1 的位置存储的是它的左子节点，下标 2 * k + 2 的位置存储的是它的右子节点, 父节点 (k - 1) / 2</p><h2 id="二叉树的性质" tabindex="-1">二叉树的性质 <a class="header-anchor" href="#二叉树的性质" aria-label="Permalink to &quot;二叉树的性质&quot;">​</a></h2><ol><li><p>在二叉树的第 i 层上至多有 2^(i-1) 个结点（i&gt;0）</p></li><li><p>深度为 k 的二叉树至多有 2^k - 1 个结点（k&gt;0）</p></li><li><p>对于任意一棵二叉树，如果其叶结点的个数为 n0，而度数为 2 的结点个数为 n2，则 n0 = n2 + 1 节点的度：节点的子节点个数(指出去的指针数)，所以二叉树节点的度分三种0，1，2 假设一个二叉树有n个节点： 度为0的节点有n0个， 度为1的节点有n1个， 度为2的节点有n2个， 则有如下公式成立：n0 = n2 + 1 如果该二叉树是完全二叉树，则有n1 = 0 或者 n1 = 1, 因此 当n1 = 0时，n0 = (n + 1) / 2, 此时n 为奇数 当n1 = 1时，n0 = n / 2, 此时n 为偶数</p></li><li><p>具有 n 个结点的完全二叉树的深度为 log2(n+1)</p></li><li><p>具有 n 个结点的完全二叉树的结点总数为 2n+1</p></li><li><p>具有 n 个结点的完全二叉树的叶子节点个数为 2n</p></li><li><p>具有 n 个结点的完全二叉树的深度为 log2(n+1)</p></li></ol><h2 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h2><ol><li>前序遍历：节点 -&gt; 左子树 -&gt; 右子树</li><li>中序遍历：左子树 -&gt; 节点 -&gt; 右子树</li><li>后序遍历：左子树 -&gt; 右子树 -&gt; 节点</li><li>层次遍历：从上到下，从左到右</li></ol><h2 id="力扣练习" tabindex="-1">力扣练习 <a class="header-anchor" href="#力扣练习" aria-label="Permalink to &quot;力扣练习&quot;">​</a></h2><h3 id="_144" tabindex="-1">144 <a class="header-anchor" href="#_144" aria-label="Permalink to &quot;144&quot;">​</a></h3><h3 id="_94" tabindex="-1">94 <a class="header-anchor" href="#_94" aria-label="Permalink to &quot;94&quot;">​</a></h3><h3 id="_145" tabindex="-1">145 <a class="header-anchor" href="#_145" aria-label="Permalink to &quot;145&quot;">​</a></h3><h3 id="_589" tabindex="-1">589 <a class="header-anchor" href="#_589" aria-label="Permalink to &quot;589&quot;">​</a></h3><h3 id="_101" tabindex="-1">101 <a class="header-anchor" href="#_101" aria-label="Permalink to &quot;101&quot;">​</a></h3><h3 id="_106" tabindex="-1">106 <a class="header-anchor" href="#_106" aria-label="Permalink to &quot;106&quot;">​</a></h3>',23),o=[r];function n(h,d,s,c,_,u){return i(),l("div",null,o)}const p=a(t,[["render",n]]);export{q as __pageData,p as default};

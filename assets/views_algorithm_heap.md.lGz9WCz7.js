import{_ as a,o as e,c as r,R as o}from"./chunks/framework.MMMQMGZx.js";const _=JSON.parse('{"title":"堆","description":"","frontmatter":{},"headers":[],"relativePath":"views/algorithm/heap.md","filePath":"views/algorithm/heap.md"}'),i={name:"views/algorithm/heap.md"},t=o('<h1 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h1><h2 id="定义及特点" tabindex="-1">定义及特点 <a class="header-anchor" href="#定义及特点" aria-label="Permalink to &quot;定义及特点&quot;">​</a></h2><p>堆(Heap)是一种可以迅速找到数据集合中最大值或者最小值的数据结构。</p><p>堆通常可以被分为两种：大顶堆和小顶堆。</p><p>大顶堆(大根堆)：大顶堆中，父节点的键值总是大于或等于任何一个子节点的键值。可以迅速找到最大值的堆叫大顶堆</p><p>小顶堆(小根堆)：小顶堆中，父节点的键值总是小于或等于任何一个子节点的键值。可以迅速找到最小值的堆叫小顶堆</p><h2 id="二叉堆" tabindex="-1">二叉堆 <a class="header-anchor" href="#二叉堆" aria-label="Permalink to &quot;二叉堆&quot;">​</a></h2><p>二叉堆是通过完全二叉树来实现的(注意不是二叉搜索)，它具备以下特性：</p><ol><li>堆是一个完全二叉树</li><li>堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值</li></ol><h3 id="利用数组实现二叉堆" tabindex="-1">利用数组实现二叉堆 <a class="header-anchor" href="#利用数组实现二叉堆" aria-label="Permalink to &quot;利用数组实现二叉堆&quot;">​</a></h3><p>对于任意一个节点假设它存储在数组下标为k的位置则</p><ol><li>下标 2 * k + 1 的位置存储的是它的左子节点</li><li>下标 2 * k + 2 的位置存储的是它的右子节点</li></ol><p>对于任意一个节点假设它存储在数组下标为k的位置则： 1：下标(k - 1) / 2 的位置存储的是它的父节点</p><h2 id="堆的操作" tabindex="-1">堆的操作 <a class="header-anchor" href="#堆的操作" aria-label="Permalink to &quot;堆的操作&quot;">​</a></h2><h3 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h3><ol><li>新元素一律插入到堆的尾部</li><li>从尾部开始依次向上调整堆的结构直到满足堆的定义(一直到根节点结束)，我们叫做：heapifyUp</li></ol><h3 id="删除堆顶操作" tabindex="-1">删除堆顶操作 <a class="header-anchor" href="#删除堆顶操作" aria-label="Permalink to &quot;删除堆顶操作&quot;">​</a></h3><p>将堆顶的节点删除，然后将堆的最后一个节点移动到堆顶，然后通过比较和移动来维护堆的性质。</p><ol><li>将堆尾元素替换到顶部，即堆顶元素被替代删除掉</li><li>从顶部开始依次向下调整堆的结构直到满足堆的定义(一直到堆的最后一个元素结束), 我们叫做：heapifyDown</li></ol><h3 id="获取最值操作" tabindex="-1">获取最值操作 <a class="header-anchor" href="#获取最值操作" aria-label="Permalink to &quot;获取最值操作&quot;">​</a></h3><p>堆的特性就是可以迅速获取一堆元素中的最大值或者最小值，因此对于堆这种数据结构，我们返回其根节点即可，就是最大值或者最小值。时间复杂度是O(1)</p><h2 id="堆的应用" tabindex="-1">堆的应用 <a class="header-anchor" href="#堆的应用" aria-label="Permalink to &quot;堆的应用&quot;">​</a></h2><h3 id="优先级队列-优先级高的先出队列-优先级低的后出队列。" tabindex="-1">优先级队列：优先级高的先出队列，优先级低的后出队列。 <a class="header-anchor" href="#优先级队列-优先级高的先出队列-优先级低的后出队列。" aria-label="Permalink to &quot;优先级队列：优先级高的先出队列，优先级低的后出队列。&quot;">​</a></h3><h3 id="top-k-问题" tabindex="-1">Top K 问题 <a class="header-anchor" href="#top-k-问题" aria-label="Permalink to &quot;Top K 问题&quot;">​</a></h3><h3 id="_99-响应时间" tabindex="-1">99%响应时间 <a class="header-anchor" href="#_99-响应时间" aria-label="Permalink to &quot;99%响应时间&quot;">​</a></h3><h2 id="实战题目" tabindex="-1">实战题目 <a class="header-anchor" href="#实战题目" aria-label="Permalink to &quot;实战题目&quot;">​</a></h2><h3 id="剑指offer-49" tabindex="-1">剑指Offer 49 <a class="header-anchor" href="#剑指offer-49" aria-label="Permalink to &quot;剑指Offer 49&quot;">​</a></h3><h3 id="_239" tabindex="-1">239 <a class="header-anchor" href="#_239" aria-label="Permalink to &quot;239&quot;">​</a></h3><h3 id="_347" tabindex="-1">347 <a class="header-anchor" href="#_347" aria-label="Permalink to &quot;347&quot;">​</a></h3>',29),l=[t];function h(n,d,s,c,p,u){return e(),r("div",null,l)}const b=a(i,[["render",h]]);export{_ as __pageData,b as default};
